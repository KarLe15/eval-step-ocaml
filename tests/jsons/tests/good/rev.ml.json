[
  {
    "current_expression": {
      "expr":
        "let rec append l1 l2 = match l1 with | p::q -> p :: (append q l2) | [] -> l2 in\nlet rec rev l = match l with | p::q -> append (rev q) [p] | [] -> [] in\nrev [1; 2; 3; 4]",
      "envs": {}
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((let rec rev l = match l with | p::q -> append (rev q) [p] | [] -> [] in\n  rev [1; 2; 3; 4])\n[@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev =\n  ((fun l -> match l with | p::q -> append (rev q) [p] | [] -> [])[@env0 ]) in\nrev [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev l = ((match l with | p::q -> append (rev q) [p] | [] -> [])\n  [@env0 ]) in\nrev [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev l =\n  match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [] in\nrev [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr": "((rev [1; 2; 3; 4])[@env0 ])",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env1 ]) | [] -> []",
              "envs": {
                "env1": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((rev)[@env0 ]) [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env1 ]) | [] -> []",
              "envs": {
                "env1": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun l -> match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [])\n  [@env1 ]) [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env2 ]) | [] -> []",
              "envs": {
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l -> ((match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [])\n   [@env1 ])) [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env2 ]) | [] -> []",
              "envs": {
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l ->\n   match l with | p::q -> ((append (rev q) [p])[@env1 ][@env0 ]) | [] -> [])\n  [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env2 ]) | [] -> []",
              "envs": {
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((append (rev q) [p])[@env1 ][@env0 ]) | [] -> [])\n[@env2 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env2 ]) with\n| p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n| [] -> []",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3; 4] with\n| p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n| [] -> []",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env2 ]) | [] -> []",
              "envs": {
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((append (rev q) [p])[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((append (rev q) [p])[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env2 ]) | [] -> []",
              "envs": {
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((append (rev q) [p])[@env0 ])",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env1 ]) | [] -> []",
              "envs": {
                "env1": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env2 ]) ((rev q)[@env0 ]) (([p])[@env1 ])",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) [((p)[@env2 ])]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((rev)[@env0 ]) [2; 3; 4]) [((p)[@env1 ])]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) (((rev)[@env0 ]) [2; 3; 4]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env2 ]) | [] -> []",
              "envs": {
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((fun l ->\n       match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [])\n     [@env1 ]) [2; 3; 4]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  ((fun l ->\n      ((match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [])\n      [@env1 ])) [2; 3; 4]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  ((fun l ->\n      match l with\n      | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n      | [] -> []) [2; 3; 4]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  ((match l with | p::q -> ((append (rev q) [p])[@env1 ][@env0 ]) | [] -> [])\n  [@env2 ]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (match ((l)[@env2 ]) with\n   | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n   | [] -> []) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (match [2; 3; 4] with\n   | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n   | [] -> []) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) ((append (rev q) [p])[@env2 ][@env1 ][@env0 ]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env2 ]) ((append (rev q) [p])[@env1 ][@env0 ]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) ((append (rev q) [p])[@env0 ]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env2 ]) | [] -> []",
              "envs": {
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (((append)[@env2 ]) ((rev q)[@env0 ]) (([p])[@env1 ])) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ])) \n  [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ])) \n  [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) [((p)[@env2 ])]) \n  [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (((rev)[@env0 ]) [3; 4]) [((p)[@env1 ])]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((append)[@env1 ]) (((rev)[@env0 ]) [3; 4]) [2]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     (((fun l ->\n          match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [])\n        [@env1 ]) [3; 4]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     ((fun l ->\n         ((match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [])\n         [@env1 ])) [3; 4]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     ((fun l ->\n         match l with\n         | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n         | [] -> []) [3; 4]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     ((match l with\n       | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n       | [] -> [])[@env2 ]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (match ((l)[@env2 ]) with\n      | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n      | [] -> []) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     (match [3; 4] with\n      | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n      | [] -> []) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) ((append (rev q) [p])[@env2 ][@env1 ][@env0 ]) [2]) \n  [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) ((append (rev q) [p])[@env1 ][@env0 ]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((append)[@env1 ]) ((append (rev q) [p])[@env0 ]) [2])\n  [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env3 ]) | [] -> []",
              "envs": {
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) (((append)[@env2 ]) ((rev q)[@env0 ]) (([p])[@env1 ]))\n     [2]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ])) \n     [2]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ])) \n     [2]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) [((p)[@env2 ])]) \n     [2]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ]) (((rev)[@env0 ]) [4]) [((p)[@env1 ])]) [2]) \n  [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (((append)[@env1 ]) (((rev)[@env0 ]) [4]) [3]) [2]) \n  [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ])\n        (((fun l ->\n             match l with | p::q -> ((append (rev q) [p])[@env0 ]) | [] -> [])\n           [@env1 ]) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ])\n        ((fun l ->\n            ((match l with\n              | p::q -> ((append (rev q) [p])[@env0 ])\n              | [] -> [])\n            [@env1 ])) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ])\n        ((fun l ->\n            match l with\n            | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n            | [] -> []) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        ((match l with\n          | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n          | [] -> [])[@env2 ]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (match ((l)[@env2 ]) with\n         | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n         | [] -> []) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ])\n        (match [4] with\n         | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n         | [] -> []) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ]) ((append (rev q) [p])[@env2 ][@env1 ][@env0 ]) [3])\n     [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ]) ((append (rev q) [p])[@env1 ][@env0 ]) [3]) \n     [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (((append)[@env1 ]) ((append (rev q) [p])[@env0 ]) [3])\n     [2]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env4 ]) | [] -> []",
              "envs": {
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (((append)[@env2 ]) ((rev q)[@env0 ]) (([p])[@env1 ])) [3]) [2]) \n  [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env6 ])\n  (((append)[@env5 ])\n     (((append)[@env4 ])\n        (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ]))\n        [3]) [2]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env7 ]) | [] -> []",
              "envs": {
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env6 ])\n  (((append)[@env5 ])\n     (((append)[@env4 ])\n        (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) (([p])[@env2 ]))\n        [3]) [2]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env7 ]) | [] -> []",
              "envs": {
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env6 ])\n  (((append)[@env5 ])\n     (((append)[@env4 ])\n        (((append)[@env3 ]) (((rev)[@env1 ]) ((q)[@env0 ])) [((p)[@env2 ])])\n        [3]) [2]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env7 ]) | [] -> []",
              "envs": {
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (((append)[@env2 ]) (((rev)[@env0 ]) []) [((p)[@env1 ])]) [3]) \n     [2]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ]) (((append)[@env1 ]) (((rev)[@env0 ]) []) [4]) [3])\n     [2]) [1]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env5 ]) | [] -> []",
              "envs": {
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (((append)[@env2 ])\n           (((fun l ->\n                match l with\n                | p::q -> ((append (rev q) [p])[@env0 ])\n                | [] -> [])[@env1 ]) []) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (((append)[@env2 ])\n           ((fun l ->\n               ((match l with\n                 | p::q -> ((append (rev q) [p])[@env0 ])\n                 | [] -> [])\n               [@env1 ])) []) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (((append)[@env2 ])\n           ((fun l ->\n               match l with\n               | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n               | [] -> []) []) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env6 ])\n  (((append)[@env5 ])\n     (((append)[@env4 ])\n        (((append)[@env3 ])\n           ((match l with\n             | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n             | [] -> [])[@env2 ]) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env7 ]) | [] -> []",
              "envs": {
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env6 ])\n  (((append)[@env5 ])\n     (((append)[@env4 ])\n        (((append)[@env3 ])\n           (match ((l)[@env2 ]) with\n            | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n            | [] -> []) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env7 ]) | [] -> []",
              "envs": {
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (((append)[@env2 ])\n           (match [] with\n            | p::q -> ((append (rev q) [p])[@env1 ][@env0 ])\n            | [] -> []) [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "rev": {
            "corec": [ "rev" ],
            "expr": {
              "expr":
                "fun l -> match l with | p::q -> ((append (rev q) [p])[@env6 ]) | [] -> []",
              "envs": {
                "env6": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (((append)[@env1 ]) (((append)[@env0 ]) [] [4]) [3])\n     [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     (((append)[@env1 ])\n        (((fun l1 ->\n             fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n           [@env0 ]) [] [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     (((append)[@env1 ])\n        ((fun l1 ->\n            ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n            [@env0 ])) [] [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     (((append)[@env1 ])\n        ((fun l1 ->\n            fun l2 ->\n              ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n              [@env0 ])) [] [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     (((append)[@env1 ])\n        ((fun l1 ->\n            fun l2 ->\n              match l1 with\n              | p::q -> ((p :: (append q l2))[@env0 ])\n              | [] -> l2) [] [4]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (((append)[@env2 ])\n        ((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n        [@env1 ]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env6 ])\n  (((append)[@env5 ])\n     (((append)[@env4 ])\n        (match ((l1)[@env3 ]) with\n         | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n         | [] -> ((l2)[@env2 ])) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (((append)[@env3 ])\n        (match [] with\n         | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n         | [] -> ((l2)[@env2 ])) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (((append)[@env1 ]) ((l2)[@env0 ]) [3]) [2]) [1]",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((append)[@env1 ]) (((append)[@env0 ]) [4] [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ])\n     (((fun l1 ->\n          fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env0 ]) [4] [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ])\n     ((fun l1 ->\n         ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n         [@env0 ])) [4] [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ])\n     ((fun l1 ->\n         fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n           [@env0 ])) [4] [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ])\n     ((fun l1 ->\n         fun l2 ->\n           match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n        [4] [3]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ])\n     ((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n     [@env1 ]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ])\n     (match ((l1)[@env3 ]) with\n      | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n      | [] -> ((l2)[@env2 ])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ])\n     (match [4] with\n      | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n      | [] -> ((l2)[@env2 ])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) ((p :: (append q l2))[@env2 ][@env1 ][@env0 ]) [2]) \n  [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) ((p :: (append q l2))[@env1 ][@env0 ]) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((append)[@env1 ]) ((p :: (append q l2))[@env0 ]) [2])\n  [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((append)[@env1 ]) ((p :: (append q l2))[@env0 ]) [2])\n  [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (((p)[@env0 ]) :: ((append q l2)[@env1 ])) [2]) \n  [1]",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ]) (((p)[@env0 ]) ::\n     (((append)[@env3 ]) ((q)[@env1 ]) ((l2)[@env2 ]))) [2]) [1]",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) (4 ::\n     (((append)[@env2 ]) ((q)[@env0 ]) ((l2)[@env1 ]))) [2]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (4 :: (((append)[@env1 ]) [] ((l2)[@env0 ]))) [2]) \n  [1]",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ]) (4 :: (((append)[@env0 ]) [] [3])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ]) (4 ::\n     (((fun l1 ->\n          fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env0 ]) [] [3])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ]) (4 ::\n     ((fun l1 ->\n         ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n         [@env0 ])) [] [3])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ]) (4 ::\n     ((fun l1 ->\n         fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n           [@env0 ])) [] [3])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  (((append)[@env1 ]) (4 ::\n     ((fun l1 ->\n         fun l2 ->\n           match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n        [] [3])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (((append)[@env2 ]) (4 ::\n     ((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n     [@env1 ])) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env5 ])\n  (((append)[@env4 ]) (4 ::\n     (match ((l1)[@env3 ]) with\n      | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n      | [] -> ((l2)[@env2 ]))) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (((append)[@env3 ]) (4 ::\n     (match [] with\n      | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n      | [] -> ((l2)[@env2 ]))) [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((append)[@env1 ]) (4 :: ((l2)[@env0 ])) [2]) [1]",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) (((append)[@env0 ]) [4; 3] [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ])\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env0 ]) [4; 3] [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ])\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env0 ])) [4; 3] [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ])\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env0 ])) [4; 3] [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ])\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n     [4; 3] [2]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ])\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n  [@env1 ]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[4; 3]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ])\n  (match ((l1)[@env3 ]) with\n   | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n   | [] -> ((l2)[@env2 ])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[4; 3]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ])\n  (match [4; 3] with\n   | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n   | [] -> ((l2)[@env2 ])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) ((p :: (append q l2))[@env2 ][@env1 ][@env0 ]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env2 ]) ((p :: (append q l2))[@env1 ][@env0 ]) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) ((p :: (append q l2))[@env0 ]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) ((p :: (append q l2))[@env0 ]) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (((p)[@env0 ]) :: ((append q l2)[@env1 ])) [1]",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ]) (((p)[@env0 ]) ::\n  (((append)[@env3 ]) ((q)[@env1 ]) ((l2)[@env2 ]))) [1]",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (4 :: (((append)[@env2 ]) ((q)[@env0 ]) ((l2)[@env1 ])))\n  [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (4 :: (((append)[@env1 ]) [3] ((l2)[@env0 ]))) [1]",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) (4 :: (((append)[@env0 ]) [3] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env0 ]) [3] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env0 ])) [3] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env0 ])) [3] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n     [3] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (4 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n  [@env1 ])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ]) (4 ::\n  (match ((l1)[@env3 ]) with\n   | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n   | [] -> ((l2)[@env2 ]))) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (4 ::\n  (match [3] with\n   | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n   | [] -> ((l2)[@env2 ]))) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (4 :: ((p :: (append q l2))[@env2 ][@env1 ][@env0 ])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (4 :: ((p :: (append q l2))[@env1 ][@env0 ])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) (4 :: ((p :: (append q l2))[@env0 ])) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) (4 :: ((p :: (append q l2))[@env0 ])) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (4 :: ((p)[@env0 ]) :: ((append q l2)[@env1 ])) [1]",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ]) (4 :: ((p)[@env0 ]) ::\n  (((append)[@env3 ]) ((q)[@env1 ]) ((l2)[@env2 ]))) [1]",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (4 :: 3 ::\n  (((append)[@env2 ]) ((q)[@env0 ]) ((l2)[@env1 ]))) [1]",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (4 :: 3 :: (((append)[@env1 ]) [] ((l2)[@env0 ]))) [1]",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 :: 3 :: (((append)[@env0 ]) [] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 :: 3 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env0 ]) [] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 :: 3 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env0 ])) [] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 :: 3 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env0 ])) [] [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env1 ]) (4 :: 3 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2) []\n     [2])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env2 ]) (4 :: 3 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n  [@env1 ])) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env4 ]) (4 :: 3 ::\n  (match ((l1)[@env3 ]) with\n   | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n   | [] -> ((l2)[@env2 ]))) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((append)[@env3 ]) (4 :: 3 ::\n  (match [] with\n   | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n   | [] -> ((l2)[@env2 ]))) [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env1 ]) (4 :: 3 :: ((l2)[@env0 ])) [1]",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((append)[@env0 ]) [4; 3; 2] [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n  [@env0 ]) [4; 3; 2] [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l1 -> ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n   [@env0 ])) [4; 3; 2] [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l1 ->\n   fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env0 ])) [4; 3; 2] [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l1 ->\n   fun l2 ->\n     match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n  [4; 3; 2] [1]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)[@env1 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[4; 3; 2]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l1)[@env3 ]) with\n| p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n| [] -> ((l2)[@env2 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[4; 3; 2]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [4; 3; 2] with\n| p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n| [] -> ((l2)[@env2 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((p :: (append q l2))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((p :: (append q l2))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((p :: (append q l2))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((p :: (append q l2))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((p)[@env0 ]) :: ((append q l2)[@env1 ])",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((p)[@env0 ]) :: (((append)[@env3 ]) ((q)[@env1 ]) ((l2)[@env2 ]))",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: (((append)[@env2 ]) ((q)[@env0 ]) ((l2)[@env1 ]))",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: (((append)[@env1 ]) [3; 2] ((l2)[@env0 ]))",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: (((append)[@env0 ]) [3; 2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "4 ::\n(((fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n   [@env0 ]) [3; 2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 ::\n((fun l1 ->\n    ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n    [@env0 ])) [3; 2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 ::\n((fun l1 ->\n    fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env0 ])) [3; 2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 ::\n((fun l1 ->\n    fun l2 ->\n      match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n   [3; 2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: ((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)\n[@env1 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 ::\n(match ((l1)[@env3 ]) with\n | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n | [] -> ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[3; 2]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "4 ::\n(match [3; 2] with\n | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n | [] -> ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "4 :: ((p :: (append q l2))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "4 :: ((p :: (append q l2))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "4 :: ((p :: (append q l2))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "4 :: ((p :: (append q l2))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "4 :: ((p)[@env0 ]) :: ((append q l2)[@env1 ])",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: ((p)[@env0 ]) :: (((append)[@env3 ]) ((q)[@env1 ]) ((l2)[@env2 ]))",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: (((append)[@env2 ]) ((q)[@env0 ]) ((l2)[@env1 ]))",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: (((append)[@env1 ]) [2] ((l2)[@env0 ]))",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: (((append)[@env0 ]) [2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 ::\n(((fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n   [@env0 ]) [2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 ::\n((fun l1 ->\n    ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n    [@env0 ])) [2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 ::\n((fun l1 ->\n    fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env0 ])) [2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 ::\n((fun l1 ->\n    fun l2 ->\n      match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2) \n   [2] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 ::\n((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)[@env1 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 ::\n(match ((l1)[@env3 ]) with\n | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n | [] -> ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[2]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 ::\n(match [2] with\n | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n | [] -> ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: ((p :: (append q l2))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: ((p :: (append q l2))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: ((p :: (append q l2))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: ((p :: (append q l2))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: ((p)[@env0 ]) :: ((append q l2)[@env1 ])",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: ((p)[@env0 ]) :: (((append)[@env3 ]) ((q)[@env1 ]) ((l2)[@env2 ]))",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 :: (((append)[@env2 ]) ((q)[@env0 ]) ((l2)[@env1 ]))",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: 2 :: (((append)[@env1 ]) [] ((l2)[@env0 ]))",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: 2 :: (((append)[@env0 ]) [] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 ::\n(((fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n   [@env0 ]) [] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 ::\n((fun l1 ->\n    ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n    [@env0 ])) [] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 ::\n((fun l1 ->\n    fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env0 ])) [] [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 ::\n((fun l1 ->\n    fun l2 ->\n      match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2) []\n   [1])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 ::\n((match l1 with | p::q -> ((p :: (append q l2))[@env0 ]) | [] -> l2)[@env1 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 ::\n(match ((l1)[@env3 ]) with\n | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n | [] -> ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "4 :: 3 :: 2 ::\n(match [] with\n | p::q -> ((p :: (append q l2))[@env1 ][@env0 ])\n | [] -> ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "4 :: 3 :: 2 :: ((l2)[@env0 ])",
      "envs": {
        "env0": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": { "expr": "[4; 3; 2; 1]", "envs": {} },
    "step": []
  }
]