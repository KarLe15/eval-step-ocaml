[
  {
    "current_expression": {
      "expr": "let x = 3 in let f x = x in f 2",
      "envs": {}
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr": "((let f x = x in f 2)[@env0 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "let f = ((fun x -> x)[@env0 ]) in f 2",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": { "expr": "let f x = x in f 2", "envs": {} },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr": "((f 2)[@env0 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "fun x -> x", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((f)[@env0 ]) 2",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "fun x -> x", "envs": {} } }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": { "expr": "(fun x -> x) 2", "envs": {} },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr": "((x)[@env0 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "2", "envs": {} }, "step": [] }
]