[
  {
    "current_expression": {
      "expr": "((List.sort (-) [1; 5; 3])[@env0 ])",
      "envs": {
        "env0": {
          "List.sort": {
            "corec": [],
            "expr": {
              "expr":
                "fun cmp ->\n  ((fun l ->\n      let rec rev_merge l1 l2 accu =\n        match (l1, l2) with\n        | ([], l2) -> List.rev_append l2 accu\n        | (l1, []) -> List.rev_append l1 accu\n        | (h1::t1, h2::t2) ->\n            if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu) in\n      let rec rev_merge_rev l1 l2 accu =\n        match (l1, l2) with\n        | ([], l2) -> List.rev_append l2 accu\n        | (l1, []) -> List.rev_append l1 accu\n        | (h1::t1, h2::t2) ->\n            if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu) in\n      let rec sort n l =\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n            (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) <= 0\n              then\n                (if (cmp x2 x3) <= 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) <= 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = rev_sort n1 l in\n            let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n      and rev_sort n l =\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n      let len = List.length l in if len < 2 then l else fst (sort len l))\n  [@env1 ])",
              "envs": {
                "env1": {
                  "List.tl": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun ll -> ((match ll with | [] -> failwith \"tl\" | _::l -> l)[@env3 ])",
                      "envs": {
                        "env3": {
                          "failwith": {
                            "corec": [],
                            "expr": {
                              "expr": "fun s -> raise (Failure s)",
                              "envs": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  },
                  "List.length": {
                    "corec": [],
                    "expr": {
                      "expr": "fun l -> ((List.length_aux 0 l)[@env2 ])",
                      "envs": {
                        "env2": {
                          "List.length_aux": {
                            "corec": [ "List.length_aux" ],
                            "expr": {
                              "expr":
                                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                              "envs": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "fst": {
                    "corec": [],
                    "expr": { "expr": "fun (a, _) -> a", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((List.sort)[@env0 ]) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "List.sort": {
            "corec": [],
            "expr": {
              "expr":
                "fun cmp ->\n  ((fun l ->\n      let rec rev_merge l1 l2 accu =\n        match (l1, l2) with\n        | ([], l2) -> List.rev_append l2 accu\n        | (l1, []) -> List.rev_append l1 accu\n        | (h1::t1, h2::t2) ->\n            if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu) in\n      let rec rev_merge_rev l1 l2 accu =\n        match (l1, l2) with\n        | ([], l2) -> List.rev_append l2 accu\n        | (l1, []) -> List.rev_append l1 accu\n        | (h1::t1, h2::t2) ->\n            if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu) in\n      let rec sort n l =\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n            (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) <= 0\n              then\n                (if (cmp x2 x3) <= 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) <= 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = rev_sort n1 l in\n            let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n      and rev_sort n l =\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n      let len = List.length l in if len < 2 then l else fst (sort len l))\n  [@env1 ])",
              "envs": {
                "env1": {
                  "List.tl": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun ll -> ((match ll with | [] -> failwith \"tl\" | _::l -> l)[@env3 ])",
                      "envs": {
                        "env3": {
                          "failwith": {
                            "corec": [],
                            "expr": {
                              "expr": "fun s -> raise (Failure s)",
                              "envs": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  },
                  "List.length": {
                    "corec": [],
                    "expr": {
                      "expr": "fun l -> ((List.length_aux 0 l)[@env2 ])",
                      "envs": {
                        "env2": {
                          "List.length_aux": {
                            "corec": [ "List.length_aux" ],
                            "expr": {
                              "expr":
                                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                              "envs": {}
                            }
                          }
                        }
                      }
                    }
                  },
                  "fst": {
                    "corec": [],
                    "expr": { "expr": "fun (a, _) -> a", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   ((fun l ->\n       let rec rev_merge l1 l2 accu =\n         match (l1, l2) with\n         | ([], l2) -> List.rev_append l2 accu\n         | (l1, []) -> List.rev_append l1 accu\n         | (h1::t1, h2::t2) ->\n             if (cmp h1 h2) <= 0\n             then rev_merge t1 l2 (h1 :: accu)\n             else rev_merge l1 t2 (h2 :: accu) in\n       let rec rev_merge_rev l1 l2 accu =\n         match (l1, l2) with\n         | ([], l2) -> List.rev_append l2 accu\n         | (l1, []) -> List.rev_append l1 accu\n         | (h1::t1, h2::t2) ->\n             if (cmp h1 h2) > 0\n             then rev_merge_rev t1 l2 (h1 :: accu)\n             else rev_merge_rev l1 t2 (h2 :: accu) in\n       let rec sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) <= 0\n               then\n                 (if (cmp x2 x3) <= 0\n                  then [x1; x2; x3]\n                  else\n                    if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) <= 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = rev_sort n1 l in\n             let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n       and rev_sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) > 0\n               then\n                 (if (cmp x2 x3) > 0\n                  then [x1; x2; x3]\n                  else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) > 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = sort n1 l in\n             let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n       let len = List.length l in if len < 2 then l else fst (sort len l))\n   [@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "List.tl": {
            "corec": [],
            "expr": {
              "expr":
                "fun ll -> ((match ll with | [] -> failwith \"tl\" | _::l -> l)[@env2 ])",
              "envs": {
                "env2": {
                  "failwith": {
                    "corec": [],
                    "expr": {
                      "expr": "fun s -> raise (Failure s)",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          },
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env1 ])",
              "envs": {
                "env1": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     ((let rec rev_merge l1 l2 accu =\n         match (l1, l2) with\n         | ([], l2) -> List.rev_append l2 accu\n         | (l1, []) -> List.rev_append l1 accu\n         | (h1::t1, h2::t2) ->\n             if (cmp h1 h2) <= 0\n             then rev_merge t1 l2 (h1 :: accu)\n             else rev_merge l1 t2 (h2 :: accu) in\n       let rec rev_merge_rev l1 l2 accu =\n         match (l1, l2) with\n         | ([], l2) -> List.rev_append l2 accu\n         | (l1, []) -> List.rev_append l1 accu\n         | (h1::t1, h2::t2) ->\n             if (cmp h1 h2) > 0\n             then rev_merge_rev t1 l2 (h1 :: accu)\n             else rev_merge_rev l1 t2 (h2 :: accu) in\n       let rec sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) <= 0\n               then\n                 (if (cmp x2 x3) <= 0\n                  then [x1; x2; x3]\n                  else\n                    if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) <= 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = rev_sort n1 l in\n             let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n       and rev_sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) > 0\n               then\n                 (if (cmp x2 x3) > 0\n                  then [x1; x2; x3]\n                  else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) > 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = sort n1 l in\n             let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n       let len = List.length l in if len < 2 then l else fst (sort len l))\n     [@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          },
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env1 ])",
              "envs": {
                "env1": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env1 ]) in\n     ((let rec rev_merge_rev l1 l2 accu =\n         match (l1, l2) with\n         | ([], l2) -> List.rev_append l2 accu\n         | (l1, []) -> List.rev_append l1 accu\n         | (h1::t1, h2::t2) ->\n             if (cmp h1 h2) > 0\n             then rev_merge_rev t1 l2 (h1 :: accu)\n             else rev_merge_rev l1 t2 (h2 :: accu) in\n       let rec sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) <= 0\n               then\n                 (if (cmp x2 x3) <= 0\n                  then [x1; x2; x3]\n                  else\n                    if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) <= 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = rev_sort n1 l in\n             let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n       and rev_sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) > 0\n               then\n                 (if (cmp x2 x3) > 0\n                  then [x1; x2; x3]\n                  else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) > 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = sort n1 l in\n             let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n       let len = List.length l in if len < 2 then l else fst (sort len l))\n       [@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          },
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env2 ])",
              "envs": {
                "env2": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec rev_merge_rev =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) > 0\n                   then rev_merge_rev t1 l2 (h1 :: accu)\n                   else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env1 ]) in\n     ((let rec sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) <= 0\n               then\n                 (if (cmp x2 x3) <= 0\n                  then [x1; x2; x3]\n                  else\n                    if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) <= 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = rev_sort n1 l in\n             let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n       and rev_sort n l =\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in\n             (s, tl)\n         | (3, x1::x2::x3::tl) ->\n             let s =\n               if (cmp x1 x2) > 0\n               then\n                 (if (cmp x2 x3) > 0\n                  then [x1; x2; x3]\n                  else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n               else\n                 if (cmp x1 x3) > 0\n                 then [x2; x1; x3]\n                 else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n             (s, tl)\n         | (n, l) ->\n             let n1 = n asr 1 in\n             let n2 = n - n1 in\n             let (s1, l2) = sort n1 l in\n             let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n       let len = List.length l in if len < 2 then l else fst (sort len l))\n       [@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env3 ])",
              "envs": {
                "env3": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec rev_merge_rev =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) > 0\n                   then rev_merge_rev t1 l2 (h1 :: accu)\n                   else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env1 ]) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     ((let len = List.length l in if len < 2 then l else fst (sort len l))\n       [@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env3 ])",
              "envs": {
                "env3": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env3 ]) in\n     let rec rev_merge_rev =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) > 0\n                   then rev_merge_rev t1 l2 (h1 :: accu)\n                   else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length l)[@env1 ]) in\n     ((if len < 2 then l else fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env4 ])",
              "envs": {
                "env4": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env3 ]) in\n     let rec rev_merge_rev =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) > 0\n                   then rev_merge_rev t1 l2 (h1 :: accu)\n                   else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length l)[@env1 ]) in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env4 ])",
              "envs": {
                "env4": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env3 ]) in\n     let rec rev_merge_rev =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) > 0\n                   then rev_merge_rev t1 l2 (h1 :: accu)\n                   else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env4 ])",
              "envs": {
                "env4": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env3 ]) in\n     let rec rev_merge_rev l1 =\n       ((fun l2 ->\n           fun accu ->\n             match (l1, l2) with\n             | ([], l2) -> List.rev_append l2 accu\n             | (l1, []) -> List.rev_append l1 accu\n             | (h1::t1, h2::t2) ->\n                 if (cmp h1 h2) > 0\n                 then rev_merge_rev t1 l2 (h1 :: accu)\n                 else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env4 ])",
              "envs": {
                "env4": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env3 ]) in\n     let rec rev_merge_rev l1 l2 =\n       ((fun accu ->\n           match (l1, l2) with\n           | ([], l2) -> List.rev_append l2 accu\n           | (l1, []) -> List.rev_append l1 accu\n           | (h1::t1, h2::t2) ->\n               if (cmp h1 h2) > 0\n               then rev_merge_rev t1 l2 (h1 :: accu)\n               else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env4 ])",
              "envs": {
                "env4": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env3 ]) in\n     let rec rev_merge_rev l1 l2 accu =\n       ((match (l1, l2) with\n         | ([], l2) -> List.rev_append l2 accu\n         | (l1, []) -> List.rev_append l1 accu\n         | (h1::t1, h2::t2) ->\n             if (cmp h1 h2) > 0\n             then rev_merge_rev t1 l2 (h1 :: accu)\n             else rev_merge_rev l1 t2 (h2 :: accu))\n       [@env2 ]) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env4 ])",
              "envs": {
                "env4": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge =\n       ((fun l1 ->\n           fun l2 ->\n             fun accu ->\n               match (l1, l2) with\n               | ([], l2) -> List.rev_append l2 accu\n               | (l1, []) -> List.rev_append l1 accu\n               | (h1::t1, h2::t2) ->\n                   if (cmp h1 h2) <= 0\n                   then rev_merge t1 l2 (h1 :: accu)\n                   else rev_merge l1 t2 (h2 :: accu))\n       [@env4 ]) in\n     let rec rev_merge_rev l1 l2 accu =\n       match (l1, l2) with\n       | ([], l2) -> ((List.rev_append l2 accu)[@env2 ])\n       | (l1, []) -> ((List.rev_append l1 accu)[@env3 ])\n       | (h1::t1, h2::t2) ->\n           if (cmp h1 h2) > 0\n           then rev_merge_rev t1 l2 (h1 :: accu)\n           else rev_merge_rev l1 t2 (h2 :: accu) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env5 ])",
              "envs": {
                "env5": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge l1 =\n       ((fun l2 ->\n           fun accu ->\n             match (l1, l2) with\n             | ([], l2) -> List.rev_append l2 accu\n             | (l1, []) -> List.rev_append l1 accu\n             | (h1::t1, h2::t2) ->\n                 if (cmp h1 h2) <= 0\n                 then rev_merge t1 l2 (h1 :: accu)\n                 else rev_merge l1 t2 (h2 :: accu))\n       [@env4 ]) in\n     let rec rev_merge_rev l1 l2 accu =\n       match (l1, l2) with\n       | ([], l2) -> ((List.rev_append l2 accu)[@env2 ])\n       | (l1, []) -> ((List.rev_append l1 accu)[@env3 ])\n       | (h1::t1, h2::t2) ->\n           if (cmp h1 h2) > 0\n           then rev_merge_rev t1 l2 (h1 :: accu)\n           else rev_merge_rev l1 t2 (h2 :: accu) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env5 ])",
              "envs": {
                "env5": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge l1 l2 =\n       ((fun accu ->\n           match (l1, l2) with\n           | ([], l2) -> List.rev_append l2 accu\n           | (l1, []) -> List.rev_append l1 accu\n           | (h1::t1, h2::t2) ->\n               if (cmp h1 h2) <= 0\n               then rev_merge t1 l2 (h1 :: accu)\n               else rev_merge l1 t2 (h2 :: accu))\n       [@env4 ]) in\n     let rec rev_merge_rev l1 l2 accu =\n       match (l1, l2) with\n       | ([], l2) -> ((List.rev_append l2 accu)[@env2 ])\n       | (l1, []) -> ((List.rev_append l1 accu)[@env3 ])\n       | (h1::t1, h2::t2) ->\n           if (cmp h1 h2) > 0\n           then rev_merge_rev t1 l2 (h1 :: accu)\n           else rev_merge_rev l1 t2 (h2 :: accu) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env5 ])",
              "envs": {
                "env5": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge l1 l2 accu =\n       ((match (l1, l2) with\n         | ([], l2) -> List.rev_append l2 accu\n         | (l1, []) -> List.rev_append l1 accu\n         | (h1::t1, h2::t2) ->\n             if (cmp h1 h2) <= 0\n             then rev_merge t1 l2 (h1 :: accu)\n             else rev_merge l1 t2 (h2 :: accu))\n       [@env4 ]) in\n     let rec rev_merge_rev l1 l2 accu =\n       match (l1, l2) with\n       | ([], l2) -> ((List.rev_append l2 accu)[@env2 ])\n       | (l1, []) -> ((List.rev_append l1 accu)[@env3 ])\n       | (h1::t1, h2::t2) ->\n           if (cmp h1 h2) > 0\n           then rev_merge_rev t1 l2 (h1 :: accu)\n           else rev_merge_rev l1 t2 (h2 :: accu) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env5 ])",
              "envs": {
                "env5": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun cmp ->\n   fun l ->\n     let rec rev_merge l1 l2 accu =\n       match (l1, l2) with\n       | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n       | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n       | (h1::t1, h2::t2) ->\n           if (cmp h1 h2) <= 0\n           then rev_merge t1 l2 (h1 :: accu)\n           else rev_merge l1 t2 (h2 :: accu) in\n     let rec rev_merge_rev l1 l2 accu =\n       match (l1, l2) with\n       | ([], l2) -> ((List.rev_append l2 accu)[@env2 ])\n       | (l1, []) -> ((List.rev_append l1 accu)[@env3 ])\n       | (h1::t1, h2::t2) ->\n           if (cmp h1 h2) > 0\n           then rev_merge_rev t1 l2 (h1 :: accu)\n           else rev_merge_rev l1 t2 (h2 :: accu) in\n     let rec sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) <= 0\n             then\n               (if (cmp x2 x3) <= 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) <= 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = rev_sort n1 l in\n           let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n     and rev_sort n l =\n       match (n, l) with\n       | (2, x1::x2::tl) ->\n           let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n       | (3, x1::x2::x3::tl) ->\n           let s =\n             if (cmp x1 x2) > 0\n             then\n               (if (cmp x2 x3) > 0\n                then [x1; x2; x3]\n                else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n             else\n               if (cmp x1 x3) > 0\n               then [x2; x1; x3]\n               else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n           (s, tl)\n       | (n, l) ->\n           let n1 = n asr 1 in\n           let n2 = n - n1 in\n           let (s1, l2) = sort n1 l in\n           let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n     let len = ((List.length)[@env1 ]) l in\n     if len < 2 then l else ((fst (sort len l))[@env0 ])) (-) [1; 5; 3]",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env6 ])",
              "envs": {
                "env6": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env5": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((let rec rev_merge l1 l2 accu =\n    match (l1, l2) with\n    | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n    | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n    | (h1::t1, h2::t2) ->\n        if (cmp h1 h2) <= 0\n        then rev_merge t1 l2 (h1 :: accu)\n        else rev_merge l1 t2 (h2 :: accu) in\n  let rec rev_merge_rev l1 l2 accu =\n    match (l1, l2) with\n    | ([], l2) -> ((List.rev_append l2 accu)[@env2 ])\n    | (l1, []) -> ((List.rev_append l1 accu)[@env3 ])\n    | (h1::t1, h2::t2) ->\n        if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu) in\n  let rec sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n  and rev_sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n  let len = ((List.length)[@env1 ]) l in\n  if len < 2 then l else ((fst (sort len l))[@env0 ]))\n[@env6 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env7 ])",
              "envs": {
                "env7": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env5": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env7 ]) in\n((let rec rev_merge_rev l1 l2 accu =\n    match (l1, l2) with\n    | ([], l2) -> ((List.rev_append l2 accu)[@env2 ])\n    | (l1, []) -> ((List.rev_append l1 accu)[@env3 ])\n    | (h1::t1, h2::t2) ->\n        if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu) in\n  let rec sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n  and rev_sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n  let len = ((List.length)[@env1 ]) l in\n  if len < 2 then l else ((fst (sort len l))[@env0 ]))[@env4 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env8 ])",
              "envs": {
                "env8": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env6": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env6 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env7 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env8 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env3 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env4 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env5 ]) in\n((let rec sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n  and rev_sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n  let len = ((List.length)[@env1 ]) l in\n  if len < 2 then l else ((fst (sort len l))[@env0 ]))[@env2 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env9 ])",
              "envs": {
                "env9": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env3": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env7": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env10 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env7 ]) in\nlet rec sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n            (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) <= 0\n              then\n                (if (cmp x2 x3) <= 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) <= 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = rev_sort n1 l in\n            let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env3 ])\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env4 ]) in\n((let len = ((List.length)[@env1 ]) l in\n  if len < 2 then l else ((fst (sort len l))[@env0 ]))[@env2 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env11 ])",
              "envs": {
                "env11": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env6": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env11 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env6 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env7 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env8 ]) in\nlet rec sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n            (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) <= 0\n              then\n                (if (cmp x2 x3) <= 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) <= 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = rev_sort n1 l in\n            let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env4 ])\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env5 ]) in\nlet len = ((((List.length)[@env2 ]) l)[@env3 ]) in\n((if len < 2 then l else ((fst (sort len l))[@env0 ]))[@env1 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env12 ])",
              "envs": {
                "env12": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env7": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env12 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env7 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env8 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env9 ]) in\nlet rec sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n            (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) <= 0\n              then\n                (if (cmp x2 x3) <= 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) <= 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = rev_sort n1 l in\n            let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env5 ])\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env6 ]) in\nlet len = ((((List.length)[@env3 ]) l)[@env4 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env13 ])",
              "envs": {
                "env13": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env12 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env7 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env8 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env9 ]) in\nlet rec sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n            (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) <= 0\n              then\n                (if (cmp x2 x3) <= 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) <= 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = rev_sort n1 l in\n            let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env5 ])\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env6 ]) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env13 ])",
              "envs": {
                "env13": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env12 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env7 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env8 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env9 ]) in\nlet rec sort n =\n  ((fun l ->\n      match (n, l) with\n      | (2, x1::x2::tl) ->\n          let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n      | (3, x1::x2::x3::tl) ->\n          let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl)\n      | (n, l) ->\n          let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env5 ])\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env6 ]) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env13 ])",
              "envs": {
                "env13": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env12 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env7 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env8 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env9 ]) in\nlet rec sort n l =\n  ((match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env5 ])\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env6 ]) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env13 ])",
              "envs": {
                "env13": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env13 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env10 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n        | (3, x1::x2::x3::tl) ->\n            let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl)\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env7 ]) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env14 ])",
              "envs": {
                "env14": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env13 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env10 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n =\n  ((fun l ->\n      match (n, l) with\n      | (2, x1::x2::tl) ->\n          let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n      | (3, x1::x2::x3::tl) ->\n          let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl)\n      | (n, l) ->\n          let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env7 ]) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env14 ])",
              "envs": {
                "env14": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env13 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env10 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  ((match (n, l) with\n    | (2, x1::x2::tl) ->\n        let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl)\n    | (3, x1::x2::x3::tl) ->\n        let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl)\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env7 ]) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env14 ])",
              "envs": {
                "env14": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) > 0\n              then rev_merge_rev t1 l2 (h1 :: accu)\n              else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev l1 =\n  ((fun l2 ->\n      fun accu ->\n        match (l1, l2) with\n        | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n        | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n        | (h1::t1, h2::t2) ->\n            if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev l1 l2 =\n  ((fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          if (cmp h1 h2) > 0\n          then rev_merge_rev t1 l2 (h1 :: accu)\n          else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  ((match (l1, l2) with\n    | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n    | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n    | (h1::t1, h2::t2) ->\n        if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n  [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge =\n  ((fun l1 ->\n      fun l2 ->\n        fun accu ->\n          match (l1, l2) with\n          | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n          | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n          | (h1::t1, h2::t2) ->\n              if (cmp h1 h2) <= 0\n              then rev_merge t1 l2 (h1 :: accu)\n              else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge l1 =\n  ((fun l2 ->\n      fun accu ->\n        match (l1, l2) with\n        | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n        | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n        | (h1::t1, h2::t2) ->\n            if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge l1 l2 =\n  ((fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          if (cmp h1 h2) <= 0\n          then rev_merge t1 l2 (h1 :: accu)\n          else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge l1 l2 accu =\n  ((match (l1, l2) with\n    | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n    | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n    | (h1::t1, h2::t2) ->\n        if (cmp h1 h2) <= 0\n        then rev_merge t1 l2 (h1 :: accu)\n        else rev_merge l1 t2 (h2 :: accu))\n  [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) <= 0\n        then rev_merge t1 l2 (h1 :: accu)\n        else rev_merge l1 t2 (h2 :: accu))\n      [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = ((List.length)[@env4 ]) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length": {
            "corec": [],
            "expr": {
              "expr": "fun l -> ((List.length_aux 0 l)[@env15 ])",
              "envs": {
                "env15": {
                  "List.length_aux": {
                    "corec": [ "List.length_aux" ],
                    "expr": {
                      "expr":
                        "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) <= 0\n        then rev_merge t1 l2 (h1 :: accu)\n        else rev_merge l1 t2 (h2 :: accu))\n      [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = (fun l -> ((List.length_aux 0 l)[@env4 ])) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) <= 0\n        then rev_merge t1 l2 (h1 :: accu)\n        else rev_merge l1 t2 (h2 :: accu))\n      [@env14 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env5 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env6 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = (fun l -> ((List.length_aux)[@env4 ]) 0 l) ((l)[@env3 ]) in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env14": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) <= 0\n        then rev_merge t1 l2 (h1 :: accu)\n        else rev_merge l1 t2 (h2 :: accu))\n      [@env13 ]) in\nlet rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env10 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env4 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env5 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env6 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env7 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = sort n1 l in\n      let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env11": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env12": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env13": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((let rec rev_merge_rev l1 l2 accu =\n    match (l1, l2) with\n    | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n    | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n    | (h1::t1, h2::t2) ->\n        ((if (cmp h1 h2) > 0\n          then rev_merge_rev t1 l2 (h1 :: accu)\n          else rev_merge_rev l1 t2 (h2 :: accu))\n        [@env10 ]) in\n  let rec sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env4 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env5 ])\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n  and rev_sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n  let len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\n  if len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ]))\n[@env11 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env11": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env14 ])",
              "envs": {
                "env12": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\n((let rec sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env4 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env5 ])\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n  and rev_sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl) in\n  let len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\n  if len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ]))\n  [@env8 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env14 ])",
              "envs": {
                "env12": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env4 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env5 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in\n              (s, tl))\n            [@env6 ])\n        | (3, x1::x2::x3::tl) ->\n            ((let s =\n                if (cmp x1 x2) > 0\n                then\n                  (if (cmp x2 x3) > 0\n                   then [x1; x2; x3]\n                   else\n                     if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n                else\n                  if (cmp x1 x3) > 0\n                  then [x2; x1; x3]\n                  else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n              (s, tl))\n            [@env7 ])\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = sort n1 l in\n            let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env8 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env14 ])",
              "envs": {
                "env12": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env4 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env5 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n =\n  ((fun l ->\n      match (n, l) with\n      | (2, x1::x2::tl) ->\n          ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n          [@env6 ])\n      | (3, x1::x2::x3::tl) ->\n          ((let s =\n              if (cmp x1 x2) > 0\n              then\n                (if (cmp x2 x3) > 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) > 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl))\n          [@env7 ])\n      | (n, l) ->\n          let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env8 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env14 ])",
              "envs": {
                "env12": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env4 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env5 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  ((match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n  [@env8 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env14 ])",
              "envs": {
                "env12": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec rev_merge_rev l1 l2 accu =\n  match (l1, l2) with\n  | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n  | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n  | (h1::t1, h2::t2) ->\n      ((if (cmp h1 h2) > 0\n        then rev_merge_rev t1 l2 (h1 :: accu)\n        else rev_merge_rev l1 t2 (h2 :: accu))\n      [@env11 ]) in\nlet rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env4 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env5 ])\n  | (n, l) ->\n      let n1 = n asr 1 in\n      let n2 = n - n1 in\n      let (s1, l2) = rev_sort n1 l in\n      let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env6 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env7 ])\n  | (n, l) ->\n      ((let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n      [@env8 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env14 ])",
              "envs": {
                "env12": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env9": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env10": {
          "List.rev_append": {
            "corec": [ "List.rev_append" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
              "envs": {}
            }
          }
        },
        "env11": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((let rec sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env4 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env5 ])\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl)\n  and rev_sort n l =\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ]) in\n  let len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\n  if len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ]))\n[@env9 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
              "envs": {
                "env10": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env11": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env9": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env15 ])",
              "envs": {
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec sort =\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n              (s, tl))\n            [@env4 ])\n        | (3, x1::x2::x3::tl) ->\n            ((let s =\n                if (cmp x1 x2) <= 0\n                then\n                  (if (cmp x2 x3) <= 0\n                   then [x1; x2; x3]\n                   else\n                     if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n                else\n                  if (cmp x1 x3) <= 0\n                  then [x2; x1; x3]\n                  else\n                    if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n              (s, tl))\n            [@env5 ])\n        | (n, l) ->\n            let n1 = n asr 1 in\n            let n2 = n - n1 in\n            let (s1, l2) = rev_sort n1 l in\n            let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env6 ])\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      ((let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n      [@env9 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env12 ])",
              "envs": {
                "env10": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env11": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env15 ])",
              "envs": {
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec sort n =\n  ((fun l ->\n      match (n, l) with\n      | (2, x1::x2::tl) ->\n          ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n            (s, tl))\n          [@env4 ])\n      | (3, x1::x2::x3::tl) ->\n          ((let s =\n              if (cmp x1 x2) <= 0\n              then\n                (if (cmp x2 x3) <= 0\n                 then [x1; x2; x3]\n                 else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n              else\n                if (cmp x1 x3) <= 0\n                then [x2; x1; x3]\n                else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n            (s, tl))\n          [@env5 ])\n      | (n, l) ->\n          let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env6 ])\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      ((let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n      [@env9 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env12 ])",
              "envs": {
                "env10": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env11": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env15 ])",
              "envs": {
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec sort n l =\n  ((match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env4 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env5 ])\n    | (n, l) ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n  [@env6 ])\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      ((let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n      [@env9 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env12 ])",
              "envs": {
                "env10": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env11": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env15 ])",
              "envs": {
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env4 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) <= 0\n          then\n            (if (cmp x2 x3) <= 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) <= 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env5 ])\n  | (n, l) ->\n      ((let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = rev_sort n1 l in\n        let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n      [@env6 ])\nand rev_sort n l =\n  match (n, l) with\n  | (2, x1::x2::tl) ->\n      ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n      [@env7 ])\n  | (3, x1::x2::x3::tl) ->\n      ((let s =\n          if (cmp x1 x2) > 0\n          then\n            (if (cmp x2 x3) > 0\n             then [x1; x2; x3]\n             else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n          else\n            if (cmp x1 x3) > 0\n            then [x2; x1; x3]\n            else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n        (s, tl))\n      [@env8 ])\n  | (n, l) ->\n      ((let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let (s1, l2) = sort n1 l in\n        let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n      [@env9 ]) in\nlet len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\nif len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env6": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env12 ])",
              "envs": {
                "env10": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env11": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env7": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env8": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env9": {
          "rev_merge": {
            "corec": [ "rev_merge" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env15 ])",
              "envs": {
                "env13": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env14": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((let len = (fun l -> ((List.length_aux)[@env3 ]) 0 l) [1; 5; 3] in\n  if len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ]))\n[@env4 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env4": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = (fun l -> ((List.length_aux)[@env4 ]) 0 l) [1; 5; 3] in\n((if len < 2 then ((l)[@env2 ]) else ((fst (sort len l))[@env1 ][@env0 ]))\n  [@env3 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = (fun l -> ((List.length_aux)[@env4 ]) 0 l) [1; 5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((((List.length_aux)[@env4 ]) 0 l)[@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env5 ]) 0 ((l)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env4 ]) 0 [1; 5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((fun len ->\n      fun ll ->\n        match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n    [@env4 ]) 0 [1; 5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     ((fun ll ->\n         match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n     [@env4 ])) 0 [1; 5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       ((match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n       [@env4 ])) 0 [1; 5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       match ll with\n       | [] -> len\n       | _::l -> ((List.length_aux (len + 1) l)[@env4 ])) 0 [1; 5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((match ll with\n    | [] -> len\n    | _::l -> ((List.length_aux (len + 1) l)[@env4 ]))\n  [@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "ll": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match ((ll)[@env7 ]) with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env14 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env15 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env16 ])",
              "envs": {
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env17 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env18 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env19 ])",
                      "envs": {
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env7": {
          "ll": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match [1; 5; 3] with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env6 ][@env5 ][@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env5 ][@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          },
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env6 ]) ((len + 1)[@env4 ]) ((l)[@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } }
        },
        "env6": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env6 ]) (((len)[@env4 ]) + 1) ((l)[@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } }
        },
        "env6": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env5 ]) (0 + 1) ((l)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env4 ]) (0 + 1) [5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env4 ]) 1 [5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((fun len ->\n      fun ll ->\n        match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n    [@env4 ]) 1 [5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     ((fun ll ->\n         match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n     [@env4 ])) 1 [5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       ((match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n       [@env4 ])) 1 [5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       match ll with\n       | [] -> len\n       | _::l -> ((List.length_aux (len + 1) l)[@env4 ])) 1 [5; 3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((match ll with\n    | [] -> len\n    | _::l -> ((List.length_aux (len + 1) l)[@env4 ]))\n  [@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "ll": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } },
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match ((ll)[@env7 ]) with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env14 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env15 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env16 ])",
              "envs": {
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env17 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env18 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env19 ])",
                      "envs": {
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env7": {
          "ll": { "corec": [], "expr": { "expr": "[5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match [5; 3] with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env6 ][@env5 ][@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env5 ][@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          },
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env6 ]) ((len + 1)[@env4 ]) ((l)[@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env6": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env6 ]) (((len)[@env4 ]) + 1) ((l)[@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env6": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env5 ]) (1 + 1) ((l)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env4 ]) (1 + 1) [3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env4 ]) 2 [3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((fun len ->\n      fun ll ->\n        match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n    [@env4 ]) 2 [3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     ((fun ll ->\n         match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n     [@env4 ])) 2 [3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       ((match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n       [@env4 ])) 2 [3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       match ll with\n       | [] -> len\n       | _::l -> ((List.length_aux (len + 1) l)[@env4 ])) 2 [3] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((match ll with\n    | [] -> len\n    | _::l -> ((List.length_aux (len + 1) l)[@env4 ]))\n  [@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "ll": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match ((ll)[@env7 ]) with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env14 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env15 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env16 ])",
              "envs": {
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env17 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env18 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env19 ])",
                      "envs": {
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env7": {
          "ll": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match [3] with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env6 ][@env5 ][@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env6": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env5 ][@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux (len + 1) l)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          },
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env6 ]) ((len + 1)[@env4 ]) ((l)[@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env6": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env6 ]) (((len)[@env4 ]) + 1) ((l)[@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env6": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env5 ]) (2 + 1) ((l)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env4 ]) (2 + 1) [] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((List.length_aux)[@env4 ]) 3 [] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((fun len ->\n      fun ll ->\n        match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n    [@env4 ]) 3 [] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     ((fun ll ->\n         match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n     [@env4 ])) 3 [] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       ((match ll with | [] -> len | _::l -> List.length_aux (len + 1) l)\n       [@env4 ])) 3 [] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  (fun len ->\n     fun ll ->\n       match ll with\n       | [] -> len\n       | _::l -> ((List.length_aux (len + 1) l)[@env4 ])) 3 [] in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  ((match ll with\n    | [] -> len\n    | _::l -> ((List.length_aux (len + 1) l)[@env4 ]))\n  [@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env5": {
          "ll": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match ((ll)[@env7 ]) with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env14 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env15 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env16 ])",
              "envs": {
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env17 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env18 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env19 ])",
                      "envs": {
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env7": {
          "ll": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len =\n  match [] with\n  | [] -> ((len)[@env4 ])\n  | _::l -> ((List.length_aux (len + 1) l)[@env6 ][@env5 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env5": {
          "List.length_aux": {
            "corec": [ "List.length_aux" ],
            "expr": {
              "expr":
                "fun len ->\n  fun ll -> match ll with | [] -> len | _::l -> List.length_aux (len + 1) l",
              "envs": {}
            }
          }
        },
        "env6": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = ((len)[@env4 ]) in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let len = 3 in\nif len < 2\nthen ((l)[@env3 ])\nelse ((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env10 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env11 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env12 ])",
              "envs": {
                "env10": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env15 ])",
                      "envs": {
                        "env13": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env4 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env5 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env6 ])",
              "envs": {
                "env4": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env7 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env8 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env9 ])",
                      "envs": {
                        "env7": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((if len < 2\n  then ((l)[@env3 ])\n  else ((fst (sort len l))[@env2 ][@env1 ][@env0 ]))\n[@env4 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env4": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((len < 2)[@env5 ])\nthen ((l)[@env4 ])\nelse ((fst (sort len l))[@env3 ][@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((len)[@env5 ]) < 2\nthen ((l)[@env4 ])\nelse ((fst (sort len l))[@env3 ][@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env12 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env13 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env14 ])",
              "envs": {
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env15 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env16 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env17 ])",
                      "envs": {
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env6 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env7 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env8 ])",
              "envs": {
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env9 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env10 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env11 ])",
                      "envs": {
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env5": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if 3 < 2\nthen ((l)[@env4 ])\nelse ((fst (sort len l))[@env3 ][@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if false\nthen ((l)[@env4 ])\nelse ((fst (sort len l))[@env3 ][@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env11 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env12 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env13 ])",
              "envs": {
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env13": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env14 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env15 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env16 ])",
                      "envs": {
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env16": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env5 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env6 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env7 ])",
              "envs": {
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env7": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env8 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env9 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env10 ])",
                      "envs": {
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env10": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((fst (sort len l))[@env3 ][@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env10 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env11 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env12 ])",
              "envs": {
                "env10": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env15 ])",
                      "envs": {
                        "env13": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env4 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env5 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env6 ])",
              "envs": {
                "env4": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env7 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env8 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env9 ])",
                      "envs": {
                        "env7": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fst (sort len l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env9 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env10 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env11 ])",
              "envs": {
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env11": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env14 ])",
                      "envs": {
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env14": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env3 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env4 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env5 ])",
              "envs": {
                "env3": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env4": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env5": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env6 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env7 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env8 ])",
                      "envs": {
                        "env6": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env7": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env8": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fst (sort len l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        },
        "env1": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env2 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env3 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env4 ])",
              "envs": {
                "env2": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env3": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env4": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env7 ])",
                      "envs": {
                        "env5": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env6": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env7": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fst (sort len l))[@env0 ])",
      "envs": {
        "env0": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env1 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env2 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env3 ])",
              "envs": {
                "env1": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env2": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env3": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env6 ])",
                      "envs": {
                        "env4": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env5": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env6": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } },
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((fst)[@env1 ]) ((sort len l)[@env0 ])",
      "envs": {
        "env0": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env2 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env3 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env4 ])",
              "envs": {
                "env2": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env3": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env4": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env7 ])",
                      "envs": {
                        "env5": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env6": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env7": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env1": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fst)[@env3 ]) (((sort)[@env2 ]) ((len)[@env0 ]) ((l)[@env1 ]))",
      "envs": {
        "env0": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env10 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env11 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env12 ])",
              "envs": {
                "env10": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env11": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env12": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env13 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env14 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env15 ])",
                      "envs": {
                        "env13": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env14": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env15": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env4 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env5 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env6 ])",
              "envs": {
                "env4": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env5": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env6": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env7 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env8 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env9 ])",
                      "envs": {
                        "env7": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env8": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env9": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "fst": {
            "corec": [],
            "expr": { "expr": "fun (a, _) -> a", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a) (((sort)[@env2 ]) ((len)[@env0 ]) ((l)[@env1 ]))",
      "envs": {
        "env0": {
          "len": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env2": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env9 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env10 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env11 ])",
              "envs": {
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env11": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env14 ])",
                      "envs": {
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env14": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env3 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env4 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env5 ])",
              "envs": {
                "env3": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env4": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env5": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env6 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env7 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env8 ])",
                      "envs": {
                        "env6": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env7": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env8": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun (a, _) -> a) (((sort)[@env1 ]) 3 ((l)[@env0 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        },
        "env1": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env2 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env3 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env4 ])",
              "envs": {
                "env2": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env3": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env4": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env7 ])",
                      "envs": {
                        "env5": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env6": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env7": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun (a, _) -> a) (((sort)[@env0 ]) 3 [1; 5; 3])",
      "envs": {
        "env0": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env1 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env2 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env3 ])",
              "envs": {
                "env1": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env2": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env3": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env6 ])",
                      "envs": {
                        "env4": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env5": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env6": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (((fun n ->\n       fun l ->\n         match (n, l) with\n         | (2, x1::x2::tl) ->\n             ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n               (s, tl))\n             [@env0 ])\n         | (3, x1::x2::x3::tl) ->\n             ((let s =\n                 if (cmp x1 x2) <= 0\n                 then\n                   (if (cmp x2 x3) <= 0\n                    then [x1; x2; x3]\n                    else\n                      if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n                 else\n                   if (cmp x1 x3) <= 0\n                   then [x2; x1; x3]\n                   else\n                     if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n               (s, tl))\n             [@env1 ])\n         | (n, l) ->\n             ((let n1 = n asr 1 in\n               let n2 = n - n1 in\n               let (s1, l2) = rev_sort n1 l in\n               let (s2, tl) = rev_sort n2 l2 in\n               ((rev_merge_rev s1 s2 []), tl))\n             [@env2 ]))[@env3 ]) 3 [1; 5; 3])",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env6 ])",
              "envs": {
                "env4": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  ((fun n ->\n      ((fun l ->\n          match (n, l) with\n          | (2, x1::x2::tl) ->\n              ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n                (s, tl))\n              [@env0 ])\n          | (3, x1::x2::x3::tl) ->\n              ((let s =\n                  if (cmp x1 x2) <= 0\n                  then\n                    (if (cmp x2 x3) <= 0\n                     then [x1; x2; x3]\n                     else\n                       if (cmp x1 x3) <= 0\n                       then [x1; x3; x2]\n                       else [x3; x1; x2])\n                  else\n                    if (cmp x1 x3) <= 0\n                    then [x2; x1; x3]\n                    else\n                      if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n                (s, tl))\n              [@env1 ])\n          | (n, l) ->\n              ((let n1 = n asr 1 in\n                let n2 = n - n1 in\n                let (s1, l2) = rev_sort n1 l in\n                let (s2, tl) = rev_sort n2 l2 in\n                ((rev_merge_rev s1 s2 []), tl))\n              [@env2 ]))\n      [@env3 ])) 3 [1; 5; 3])",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env6 ])",
              "envs": {
                "env4": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  ((fun n ->\n      fun l ->\n        ((match (n, l) with\n          | (2, x1::x2::tl) ->\n              ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n                (s, tl))\n              [@env0 ])\n          | (3, x1::x2::x3::tl) ->\n              ((let s =\n                  if (cmp x1 x2) <= 0\n                  then\n                    (if (cmp x2 x3) <= 0\n                     then [x1; x2; x3]\n                     else\n                       if (cmp x1 x3) <= 0\n                       then [x1; x3; x2]\n                       else [x3; x1; x2])\n                  else\n                    if (cmp x1 x3) <= 0\n                    then [x2; x1; x3]\n                    else\n                      if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n                (s, tl))\n              [@env1 ])\n          | (n, l) ->\n              ((let n1 = n asr 1 in\n                let n2 = n - n1 in\n                let (s1, l2) = rev_sort n1 l in\n                let (s2, tl) = rev_sort n2 l2 in\n                ((rev_merge_rev s1 s2 []), tl))\n              [@env2 ]))\n        [@env3 ])) 3 [1; 5; 3])",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env6 ])",
              "envs": {
                "env4": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  ((fun n ->\n      fun l ->\n        match (n, l) with\n        | (2, x1::x2::tl) ->\n            ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in\n              (s, tl))\n            [@env0 ])\n        | (3, x1::x2::x3::tl) ->\n            ((let s =\n                if (cmp x1 x2) <= 0\n                then\n                  (if (cmp x2 x3) <= 0\n                   then [x1; x2; x3]\n                   else\n                     if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n                else\n                  if (cmp x1 x3) <= 0\n                  then [x2; x1; x3]\n                  else\n                    if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n              (s, tl))\n            [@env1 ])\n        | (n, l) ->\n            ((let n1 = n asr 1 in\n              let n2 = n - n1 in\n              let (s1, l2) = rev_sort n1 l in\n              let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n            [@env3 ][@env2 ])) 3 [1; 5; 3])",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env6 ])",
              "envs": {
                "env4": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  ((match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env0 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env1 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env3 ][@env2 ]))[@env4 ])",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env7 ])",
              "envs": {
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env14 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env15 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env16 ])",
              "envs": {
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env17 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env18 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env19 ])",
                      "envs": {
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "n": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (match (((n, l))[@env4 ]) with\n   | (2, x1::x2::tl) ->\n       ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n       [@env0 ])\n   | (3, x1::x2::x3::tl) ->\n       ((let s =\n           if (cmp x1 x2) <= 0\n           then\n             (if (cmp x2 x3) <= 0\n              then [x1; x2; x3]\n              else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n           else\n             if (cmp x1 x3) <= 0\n             then [x2; x1; x3]\n             else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n         (s, tl))\n       [@env1 ])\n   | (n, l) ->\n       ((let n1 = n asr 1 in\n         let n2 = n - n1 in\n         let (s1, l2) = rev_sort n1 l in\n         let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n       [@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env7 ])",
              "envs": {
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env14 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env15 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env16 ])",
              "envs": {
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env17 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env18 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env19 ])",
                      "envs": {
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "n": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (match (((n)[@env4 ]), ((l)[@env5 ])) with\n   | (2, x1::x2::tl) ->\n       ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n       [@env0 ])\n   | (3, x1::x2::x3::tl) ->\n       ((let s =\n           if (cmp x1 x2) <= 0\n           then\n             (if (cmp x2 x3) <= 0\n              then [x1; x2; x3]\n              else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n           else\n             if (cmp x1 x3) <= 0\n             then [x2; x1; x3]\n             else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n         (s, tl))\n       [@env1 ])\n   | (n, l) ->\n       ((let n1 = n asr 1 in\n         let n2 = n - n1 in\n         let (s1, l2) = rev_sort n1 l in\n         let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n       [@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env6 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env7 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env8 ])",
              "envs": {
                "env6": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env7": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env15 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env16 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env17 ])",
              "envs": {
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env17": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env18 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env19 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env20 ])",
                      "envs": {
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env20": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env9 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env10 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env11 ])",
              "envs": {
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env11": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env12 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env13 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env14 ])",
                      "envs": {
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env14": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": { "n": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env5": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (match (3, ((l)[@env4 ])) with\n   | (2, x1::x2::tl) ->\n       ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n       [@env0 ])\n   | (3, x1::x2::x3::tl) ->\n       ((let s =\n           if (cmp x1 x2) <= 0\n           then\n             (if (cmp x2 x3) <= 0\n              then [x1; x2; x3]\n              else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n           else\n             if (cmp x1 x3) <= 0\n             then [x2; x1; x3]\n             else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n         (s, tl))\n       [@env1 ])\n   | (n, l) ->\n       ((let n1 = n asr 1 in\n         let n2 = n - n1 in\n         let (s1, l2) = rev_sort n1 l in\n         let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n       [@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env5 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env6 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env7 ])",
              "envs": {
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env14 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env15 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env16 ])",
              "envs": {
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env16": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env17 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env18 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env19 ])",
                      "envs": {
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env19": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env8 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env9 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env10 ])",
              "envs": {
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env10": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env11 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env12 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env13 ])",
                      "envs": {
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env13": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 5; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (match (3, [1; 5; 3]) with\n   | (2, x1::x2::tl) ->\n       ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n       [@env0 ])\n   | (3, x1::x2::x3::tl) ->\n       ((let s =\n           if (cmp x1 x2) <= 0\n           then\n             (if (cmp x2 x3) <= 0\n              then [x1; x2; x3]\n              else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n           else\n             if (cmp x1 x3) <= 0\n             then [x2; x1; x3]\n             else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n         (s, tl))\n       [@env1 ])\n   | (n, l) ->\n       ((let n1 = n asr 1 in\n         let n2 = n - n1 in\n         let (s1, l2) = rev_sort n1 l in\n         let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n       [@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "rev_merge_rev": {
            "corec": [ "rev_merge_rev" ],
            "expr": {
              "expr":
                "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env4 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env5 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env6 ])",
              "envs": {
                "env4": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env5": {
                  "List.rev_append": {
                    "corec": [ "List.rev_append" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                      "envs": {}
                    }
                  }
                },
                "env6": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) <= 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env13 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) <= 0\n            then\n              (if (cmp x2 x3) <= 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) <= 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env14 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = rev_sort n1 l in\n          let (s2, tl) = rev_sort n2 l2 in ((rev_merge_rev s1 s2 []), tl))\n        [@env15 ])",
              "envs": {
                "env13": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env14": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env15": {
                  "rev_merge_rev": {
                    "corec": [ "rev_merge_rev" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env16 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env17 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) > 0\n            then rev_merge_rev t1 l2 (h1 :: accu)\n            else rev_merge_rev l1 t2 (h2 :: accu))\n          [@env18 ])",
                      "envs": {
                        "env16": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env17": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env18": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "rev_sort": {
            "corec": [ "rev_sort", "sort" ],
            "expr": {
              "expr":
                "fun n ->\n  fun l ->\n    match (n, l) with\n    | (2, x1::x2::tl) ->\n        ((let s = if (cmp x1 x2) > 0 then [x1; x2] else [x2; x1] in (s, tl))\n        [@env7 ])\n    | (3, x1::x2::x3::tl) ->\n        ((let s =\n            if (cmp x1 x2) > 0\n            then\n              (if (cmp x2 x3) > 0\n               then [x1; x2; x3]\n               else if (cmp x1 x3) > 0 then [x1; x3; x2] else [x3; x1; x2])\n            else\n              if (cmp x1 x3) > 0\n              then [x2; x1; x3]\n              else if (cmp x2 x3) > 0 then [x2; x3; x1] else [x3; x2; x1] in\n          (s, tl))\n        [@env8 ])\n    | (n, l) ->\n        ((let n1 = n asr 1 in\n          let n2 = n - n1 in\n          let (s1, l2) = sort n1 l in\n          let (s2, tl) = sort n2 l2 in ((rev_merge s1 s2 []), tl))\n        [@env9 ])",
              "envs": {
                "env7": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env8": {
                  "cmp": {
                    "corec": [],
                    "expr": { "expr": "(-)", "envs": {} }
                  }
                },
                "env9": {
                  "rev_merge": {
                    "corec": [ "rev_merge" ],
                    "expr": {
                      "expr":
                        "fun l1 ->\n  fun l2 ->\n    fun accu ->\n      match (l1, l2) with\n      | ([], l2) -> ((List.rev_append l2 accu)[@env10 ])\n      | (l1, []) -> ((List.rev_append l1 accu)[@env11 ])\n      | (h1::t1, h2::t2) ->\n          ((if (cmp h1 h2) <= 0\n            then rev_merge t1 l2 (h1 :: accu)\n            else rev_merge l1 t2 (h2 :: accu))\n          [@env12 ])",
                      "envs": {
                        "env10": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env11": {
                          "List.rev_append": {
                            "corec": [ "List.rev_append" ],
                            "expr": {
                              "expr":
                                "fun l1 ->\n  fun l2 -> match l1 with | [] -> l2 | a::l -> List.rev_append l (a :: l2)",
                              "envs": {}
                            }
                          }
                        },
                        "env12": {
                          "cmp": {
                            "corec": [],
                            "expr": { "expr": "(-)", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  ((let s =\n      if (cmp x1 x2) <= 0\n      then\n        (if (cmp x2 x3) <= 0\n         then [x1; x2; x3]\n         else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n      else\n        if (cmp x1 x3) <= 0\n        then [x2; x1; x3]\n        else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n    (s, tl))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "tl": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  ((let s =\n      if (cmp x1 x2) <= 0\n      then\n        (if (cmp x2 x3) <= 0\n         then [x1; x2; x3]\n         else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n      else\n        if (cmp x1 x3) <= 0\n        then [x2; x1; x3]\n        else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1] in\n    (s, tl))[@env0 ])",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "tl": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     ((if (cmp x1 x2) <= 0\n       then\n         (if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n       else\n         if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n     [@env1 ]) in\n   (((s, tl))[@env0 ]))",
      "envs": {
        "env0": {
          "tl": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     ((if (cmp x1 x2) <= 0\n       then\n         (if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n       else\n         if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n     [@env1 ]) in\n   (s, ((tl)[@env0 ])))",
      "envs": {
        "env0": {
          "tl": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((cmp x1 x2) <= 0)[@env3 ])\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env2 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env1 ]) in\n   (s, ((tl)[@env0 ])))",
      "envs": {
        "env0": {
          "tl": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env3": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if ((cmp x1 x2)[@env3 ]) <= 0\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env2 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env1 ]) in\n   (s, ((tl)[@env0 ])))",
      "envs": {
        "env0": {
          "tl": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env3": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((cmp)[@env5 ]) ((x1)[@env3 ]) ((x2)[@env4 ])) <= 0\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env2 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env1 ]) in\n   (s, ((tl)[@env0 ])))",
      "envs": {
        "env0": {
          "tl": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env3": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env4": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env5": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((cmp)[@env4 ]) ((x1)[@env2 ]) ((x2)[@env3 ])) <= 0\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env1 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env3": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((x1)[@env2 ]) - ((x2)[@env3 ])) <= 0\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env1 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env3": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (1 - ((x2)[@env2 ])) <= 0\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env1 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env2": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (1 - 5) <= 0\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env1 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (-4) <= 0\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env1 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if true\n     then\n       (((if (cmp x2 x3) <= 0\n          then [x1; x2; x3]\n          else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2]))\n       [@env1 ])\n     else\n       ((if (cmp x1 x3) <= 0\n         then [x2; x1; x3]\n         else if (cmp x2 x3) <= 0 then [x2; x3; x1] else [x3; x2; x1])\n       [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     ((if (cmp x2 x3) <= 0\n       then [x1; x2; x3]\n       else if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n     [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((cmp x2 x3) <= 0)[@env2 ])\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if ((cmp x2 x3)[@env2 ]) <= 0\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((cmp)[@env4 ]) ((x2)[@env2 ]) ((x3)[@env3 ])) <= 0\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((x2)[@env2 ]) - ((x3)[@env3 ])) <= 0\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (5 - ((x3)[@env2 ])) <= 0\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (5 - 3) <= 0\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if 2 <= 0\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if false\n     then (([x1; x2; x3])[@env1 ])\n     else ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s = ((if (cmp x1 x3) <= 0 then [x1; x3; x2] else [x3; x1; x2])\n     [@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((cmp x1 x3) <= 0)[@env2 ])\n     then (([x1; x3; x2])[@env1 ])\n     else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if ((cmp x1 x3)[@env2 ]) <= 0\n     then (([x1; x3; x2])[@env1 ])\n     else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((cmp)[@env4 ]) ((x1)[@env2 ]) ((x3)[@env3 ])) <= 0\n     then (([x1; x3; x2])[@env1 ])\n     else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env3": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env4": {
          "cmp": { "corec": [], "expr": { "expr": "(-)", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (((x1)[@env2 ]) - ((x3)[@env3 ])) <= 0\n     then (([x1; x3; x2])[@env1 ])\n     else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env3": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (1 - ((x3)[@env2 ])) <= 0\n     then (([x1; x3; x2])[@env1 ])\n     else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (1 - 3) <= 0\n     then (([x1; x3; x2])[@env1 ])\n     else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if (-2) <= 0 then (([x1; x3; x2])[@env1 ]) else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s =\n     if true then (([x1; x3; x2])[@env1 ]) else (([x3; x1; x2])[@env0 ]) in\n   (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a) (let s = (([x1; x3; x2])[@env0 ]) in (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a) (let s = (([x1; x3; x2])[@env0 ]) in (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a) (let s = ((x1)[@env0 ]) :: (([x3; x2])[@env1 ]) in (s, []))",
      "envs": {
        "env0": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a) (let s = ((x1)[@env0 ]) :: (([x3; x2])[@env1 ]) in (s, []))",
      "envs": {
        "env0": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s = ((x1)[@env0 ]) :: ((x3)[@env1 ]) :: (([x2])[@env2 ]) in (s, []))",
      "envs": {
        "env0": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s = ((x1)[@env0 ]) :: ((x3)[@env1 ]) :: (([x2])[@env2 ]) in (s, []))",
      "envs": {
        "env0": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a)\n  (let s = [((x1)[@env0 ]); ((x3)[@env1 ]); ((x2)[@env2 ])] in (s, []))",
      "envs": {
        "env0": {
          "x1": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env1": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun (a, _) -> a) (let s = [1; ((x3)[@env0 ]); ((x2)[@env1 ])] in (s, []))",
      "envs": {
        "env0": {
          "x3": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env1": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun (a, _) -> a) (let s = [1; 3; ((x2)[@env0 ])] in (s, []))",
      "envs": {
        "env0": {
          "x2": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun (a, _) -> a) (let s = [1; 3; 5] in (s, []))",
      "envs": {}
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr": "(fun (a, _) -> a) (((s, []))[@env0 ])",
      "envs": {
        "env0": {
          "s": { "corec": [], "expr": { "expr": "[1; 3; 5]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "(fun (a, _) -> a) (((s)[@env0 ]), [])",
      "envs": {
        "env0": {
          "s": { "corec": [], "expr": { "expr": "[1; 3; 5]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun (a, _) -> a) ([1; 3; 5], [])",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr": "((a)[@env0 ])",
      "envs": {
        "env0": {
          "a": { "corec": [], "expr": { "expr": "[1; 3; 5]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "[1; 3; 5]", "envs": {} }, "step": [] }
]