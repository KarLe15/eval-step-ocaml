[
  {
    "current_expression": {
      "expr": "((map_tr (fun x -> 2 * x) [1; 2; 3; 4])[@env0 ])",
      "envs": {
        "env0": {
          "map_tr": {
            "corec": [],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    let rec loop f l cont =\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont [] in\n    loop f l (fun x -> x)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((map_tr)[@env0 ]) (fun x -> 2 * x) [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "map_tr": {
            "corec": [],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    let rec loop f l cont =\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont [] in\n    loop f l (fun x -> x)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     let rec loop f l cont =\n       match l with\n       | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n       | [] -> cont [] in\n     loop f l (fun x -> x)) (fun x -> 2 * x) [1; 2; 3; 4]",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((let rec loop f l cont =\n    match l with\n    | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n    | [] -> cont [] in\n  loop f l (fun x -> x))\n[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun f ->\n      fun l ->\n        fun cont ->\n          match l with\n          | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n          | [] -> cont [])\n  [@env1 ]) in\n((loop f l (fun x -> x))[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun f ->\n      fun l ->\n        fun cont ->\n          match l with\n          | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n          | [] -> cont [])\n  [@env2 ]) in\nloop ((f)[@env0 ]) ((l)[@env1 ]) (fun x -> x)",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop f =\n  ((fun l ->\n      fun cont ->\n        match l with\n        | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n        | [] -> cont [])\n  [@env2 ]) in\nloop ((f)[@env0 ]) ((l)[@env1 ]) (fun x -> x)",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop f l cont =\n  match l with\n  | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n  | [] -> cont [] in\nloop ((f)[@env0 ]) ((l)[@env1 ]) (fun x -> x)",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop f l cont =\n  match l with\n  | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n  | [] -> cont [] in\nloop (fun x -> 2 * x) ((l)[@env0 ]) (fun x -> x)",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop f l cont =\n  match l with\n  | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n  | [] -> cont [] in\nloop (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x)",
      "envs": {}
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr": "((loop (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l ->\n      fun cont ->\n        match l with\n        | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n        | [] -> cont [])[@env0 ]) (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l ->\n       fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n   [@env0 ])) (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n     [@env0 ])) (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       ((match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n       [@env0 ])) (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       match l with\n       | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])\n       | [] -> cont []) (fun x -> 2 * x) [1; 2; 3; 4] (fun x -> x)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])\n  | [] -> cont [])\n[@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3; 4] with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  ((fun rep -> cont ((f x) :: rep))[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont ((f x) :: rep))[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x)[@env2 ]) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env5 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env4": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env5": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) (fun x -> 2 * x) ((xs)[@env0 ])\n  (fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (fun x -> 2 * x) [2; 3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l ->\n      fun cont ->\n        match l with\n        | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n        | [] -> cont [])[@env3 ]) (fun x -> 2 * x) [2; 3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l ->\n       fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n   [@env3 ])) (fun x -> 2 * x) [2; 3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n     [@env3 ])) (fun x -> 2 * x) [2; 3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       ((match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n       [@env3 ])) (fun x -> 2 * x) [2; 3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       match l with\n       | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env3 ])\n       | [] -> cont []) (fun x -> 2 * x) [2; 3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])\n  | [] -> cont [])\n[@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep)",
              "envs": {
                "env2": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env3": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env4": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
              "envs": {
                "env7": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env8": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env9": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [2; 3; 4] with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
              "envs": {
                "env6": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env7": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env8": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep)",
              "envs": {
                "env2": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env3": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env4": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep)",
              "envs": {
                "env1": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env2": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env3": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  ((fun rep -> cont ((f x) :: rep))[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont ((f x) :: rep))[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x)[@env2 ]) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env5 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env4": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
              "envs": {
                "env6": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env7": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env8": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) (fun x -> 2 * x) ((xs)[@env0 ])\n  (fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (fun x -> 2 * x) [3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l ->\n      fun cont ->\n        match l with\n        | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n        | [] -> cont [])[@env3 ]) (fun x -> 2 * x) [3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l ->\n       fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n   [@env3 ])) (fun x -> 2 * x) [3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n     [@env3 ])) (fun x -> 2 * x) [3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       ((match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n       [@env3 ])) (fun x -> 2 * x) [3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       match l with\n       | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env3 ])\n       | [] -> cont []) (fun x -> 2 * x) [3; 4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])\n  | [] -> cont [])\n[@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep)",
              "envs": {
                "env2": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env3": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env4": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
                      "envs": {
                        "env5": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env6": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env7": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
              "envs": {
                "env10": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env11": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env12": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env15 ]) ((((f)[@env14 ]) ((x)[@env13 ])) :: rep)",
                      "envs": {
                        "env13": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env14": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env15": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [3; 4] with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
              "envs": {
                "env9": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env10": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env11": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env14 ]) ((((f)[@env13 ]) ((x)[@env12 ])) :: rep)",
                      "envs": {
                        "env12": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env13": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env14": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep)",
              "envs": {
                "env2": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env3": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env4": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
                      "envs": {
                        "env5": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env6": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env7": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep)",
              "envs": {
                "env1": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env2": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env3": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
                      "envs": {
                        "env4": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env5": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env6": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  ((fun rep -> cont ((f x) :: rep))[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont ((f x) :: rep))[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x)[@env2 ]) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env5 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env4": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
              "envs": {
                "env6": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env7": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env8": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
                      "envs": {
                        "env9": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env10": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env11": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) (fun x -> 2 * x) ((xs)[@env0 ])\n  (fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (fun x -> 2 * x) [4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l ->\n      fun cont ->\n        match l with\n        | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n        | [] -> cont [])[@env3 ]) (fun x -> 2 * x) [4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l ->\n       fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n   [@env3 ])) (fun x -> 2 * x) [4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n     [@env3 ])) (fun x -> 2 * x) [4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       ((match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n       [@env3 ])) (fun x -> 2 * x) [4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       match l with\n       | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env3 ])\n       | [] -> cont []) (fun x -> 2 * x) [4]\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])\n  | [] -> cont [])\n[@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep)",
              "envs": {
                "env2": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env3": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env4": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
                      "envs": {
                        "env5": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env6": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env7": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                              "envs": {
                                "env8": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env9": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env10": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env15 ]) ((((f)[@env14 ]) ((x)[@env13 ])) :: rep)",
              "envs": {
                "env13": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env14": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env15": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env18 ]) ((((f)[@env17 ]) ((x)[@env16 ])) :: rep)",
                      "envs": {
                        "env16": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env17": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env18": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env21 ]) ((((f)[@env20 ]) ((x)[@env19 ])) :: rep)",
                              "envs": {
                                "env19": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env20": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env21": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [4] with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
                              "envs": {
                                "env9": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env10": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env11": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env14 ]) ((((f)[@env13 ]) ((x)[@env12 ])) :: rep)",
              "envs": {
                "env12": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env13": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env14": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env17 ]) ((((f)[@env16 ]) ((x)[@env15 ])) :: rep)",
                      "envs": {
                        "env15": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env16": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env17": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env20 ]) ((((f)[@env19 ]) ((x)[@env18 ])) :: rep)",
                              "envs": {
                                "env18": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env19": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env20": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
                              "envs": {
                                "env9": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env10": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env11": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep)",
              "envs": {
                "env2": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env3": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env4": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
                      "envs": {
                        "env5": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env6": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env7": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                              "envs": {
                                "env8": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env9": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env10": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep)",
              "envs": {
                "env1": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env2": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env3": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
                      "envs": {
                        "env4": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env5": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env6": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                              "envs": {
                                "env7": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env8": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env9": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  ((fun rep -> cont ((f x) :: rep))[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont ((f x) :: rep))[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env13 ]) ((((f)[@env12 ]) ((x)[@env11 ])) :: rep)",
                              "envs": {
                                "env11": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env12": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env13": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x) :: rep)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env13 ]) ((((f)[@env12 ]) ((x)[@env11 ])) :: rep)",
                              "envs": {
                                "env11": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env12": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env13": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env3 ]) (((f x)[@env2 ]) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env13 ]) ((((f)[@env12 ]) ((x)[@env11 ])) :: rep)",
                              "envs": {
                                "env11": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env12": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env13": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env5 ]) ((f)[@env0 ]) ((xs)[@env1 ])\n  (fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env4": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
              "envs": {
                "env6": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env7": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env8": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
                      "envs": {
                        "env9": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env10": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env11": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env14 ]) ((((f)[@env13 ]) ((x)[@env12 ])) :: rep)",
                              "envs": {
                                "env12": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env13": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env14": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) (fun x -> 2 * x) ((xs)[@env0 ])\n  (fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env13 ]) ((((f)[@env12 ]) ((x)[@env11 ])) :: rep)",
                              "envs": {
                                "env11": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env12": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env13": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (fun x -> 2 * x) []\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l ->\n      fun cont ->\n        match l with\n        | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n        | [] -> cont [])[@env3 ]) (fun x -> 2 * x) []\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l ->\n       fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n   [@env3 ])) (fun x -> 2 * x) []\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun cont ->\n         match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n     [@env3 ])) (fun x -> 2 * x) []\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       ((match l with\n         | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n         | [] -> cont [])\n       [@env3 ])) (fun x -> 2 * x) []\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun cont ->\n       match l with\n       | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env3 ])\n       | [] -> cont []) (fun x -> 2 * x) []\n  (fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env0 ])\n  | [] -> cont [])\n[@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep)",
              "envs": {
                "env2": {
                  "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
                },
                "env3": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env4": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
                      "envs": {
                        "env5": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "3", "envs": {} }
                          }
                        },
                        "env6": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env7": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                              "envs": {
                                "env8": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "2", "envs": {} }
                                  }
                                },
                                "env9": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env10": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr":
                                        "fun rep -> ((cont)[@env13 ]) ((((f)[@env12 ]) ((x)[@env11 ])) :: rep)",
                                      "envs": {
                                        "env11": {
                                          "x": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "1",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env12": {
                                          "f": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> 2 * x",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env13": {
                                          "cont": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> x",
                                              "envs": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "3", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "2", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr":
                                        "fun rep -> ((cont)[@env15 ]) ((((f)[@env14 ]) ((x)[@env13 ])) :: rep)",
                                      "envs": {
                                        "env13": {
                                          "x": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "1",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env14": {
                                          "f": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> 2 * x",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env15": {
                                          "cont": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> x",
                                              "envs": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env18 ]) ((((f)[@env17 ]) ((x)[@env16 ])) :: rep)",
              "envs": {
                "env16": {
                  "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
                },
                "env17": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env18": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env21 ]) ((((f)[@env20 ]) ((x)[@env19 ])) :: rep)",
                      "envs": {
                        "env19": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "3", "envs": {} }
                          }
                        },
                        "env20": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env21": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env24 ]) ((((f)[@env23 ]) ((x)[@env22 ])) :: rep)",
                              "envs": {
                                "env22": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "2", "envs": {} }
                                  }
                                },
                                "env23": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env24": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr":
                                        "fun rep -> ((cont)[@env27 ]) ((((f)[@env26 ]) ((x)[@env25 ])) :: rep)",
                                      "envs": {
                                        "env25": {
                                          "x": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "1",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env26": {
                                          "f": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> 2 * x",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env27": {
                                          "cont": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> x",
                                              "envs": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [] with\n| x::xs -> ((loop f xs (fun rep -> cont ((f x) :: rep)))[@env1 ][@env0 ])\n| [] -> ((cont [])[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun cont ->\n      match l with\n      | x::xs -> loop f xs (fun rep -> cont ((f x) :: rep))\n      | [] -> cont []",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "3", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
                              "envs": {
                                "env9": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "2", "envs": {} }
                                  }
                                },
                                "env10": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env11": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr":
                                        "fun rep -> ((cont)[@env14 ]) ((((f)[@env13 ]) ((x)[@env12 ])) :: rep)",
                                      "envs": {
                                        "env12": {
                                          "x": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "1",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env13": {
                                          "f": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> 2 * x",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env14": {
                                          "cont": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> x",
                                              "envs": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env17 ]) ((((f)[@env16 ]) ((x)[@env15 ])) :: rep)",
              "envs": {
                "env15": {
                  "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
                },
                "env16": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env17": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env20 ]) ((((f)[@env19 ]) ((x)[@env18 ])) :: rep)",
                      "envs": {
                        "env18": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "3", "envs": {} }
                          }
                        },
                        "env19": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env20": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env23 ]) ((((f)[@env22 ]) ((x)[@env21 ])) :: rep)",
                              "envs": {
                                "env21": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "2", "envs": {} }
                                  }
                                },
                                "env22": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env23": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr":
                                        "fun rep -> ((cont)[@env26 ]) ((((f)[@env25 ]) ((x)[@env24 ])) :: rep)",
                                      "envs": {
                                        "env24": {
                                          "x": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "1",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env25": {
                                          "f": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> 2 * x",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env26": {
                                          "cont": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> x",
                                              "envs": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((cont [])[@env0 ])",
      "envs": {
        "env0": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep)",
              "envs": {
                "env1": {
                  "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
                },
                "env2": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env3": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
                      "envs": {
                        "env4": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "3", "envs": {} }
                          }
                        },
                        "env5": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env6": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                              "envs": {
                                "env7": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "2", "envs": {} }
                                  }
                                },
                                "env8": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env9": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr":
                                        "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                                      "envs": {
                                        "env10": {
                                          "x": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "1",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env11": {
                                          "f": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> 2 * x",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env12": {
                                          "cont": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> x",
                                              "envs": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((cont)[@env0 ]) []",
      "envs": {
        "env0": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep)",
              "envs": {
                "env1": {
                  "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
                },
                "env2": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env3": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
                      "envs": {
                        "env4": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "3", "envs": {} }
                          }
                        },
                        "env5": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env6": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                              "envs": {
                                "env7": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "2", "envs": {} }
                                  }
                                },
                                "env8": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env9": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr":
                                        "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                                      "envs": {
                                        "env10": {
                                          "x": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "1",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env11": {
                                          "f": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> 2 * x",
                                              "envs": {}
                                            }
                                          }
                                        },
                                        "env12": {
                                          "cont": {
                                            "corec": [],
                                            "expr": {
                                              "expr": "fun x -> x",
                                              "envs": {}
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep)) []",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
                              "envs": {
                                "env9": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env10": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env11": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))[@env3 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "rep": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "2", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": {
                              "expr":
                                "fun rep -> ((cont)[@env12 ]) ((((f)[@env11 ]) ((x)[@env10 ])) :: rep)",
                              "envs": {
                                "env10": {
                                  "x": {
                                    "corec": [],
                                    "expr": { "expr": "1", "envs": {} }
                                  }
                                },
                                "env11": {
                                  "f": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> 2 * x",
                                      "envs": {}
                                    }
                                  }
                                },
                                "env12": {
                                  "cont": {
                                    "corec": [],
                                    "expr": {
                                      "expr": "fun x -> x",
                                      "envs": {}
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep))\n  ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env5": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
              "envs": {
                "env6": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env7": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env8": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env11 ]) ((((f)[@env10 ]) ((x)[@env9 ])) :: rep)",
                      "envs": {
                        "env9": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env10": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env11": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep))\n  (((fun x -> 2 * x) ((x)[@env0 ])) :: ((rep)[@env1 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "rep": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env4": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env10 ]) ((((f)[@env9 ]) ((x)[@env8 ])) :: rep)",
                      "envs": {
                        "env8": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env9": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env10": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  (((fun x -> 2 * x) 4) :: ((rep)[@env0 ]))",
      "envs": {
        "env0": {
          "rep": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))\n  [((fun x -> 2 * x)) 4]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  [((2 * x)[@env0 ])]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  [2 * ((x)[@env0 ])]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep)) [2 * 4]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep)) [8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
                      "envs": {
                        "env6": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env7": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env8": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))[@env3 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "rep": { "corec": [], "expr": { "expr": "[8]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": {
                      "expr":
                        "fun rep -> ((cont)[@env9 ]) ((((f)[@env8 ]) ((x)[@env7 ])) :: rep)",
                      "envs": {
                        "env7": {
                          "x": {
                            "corec": [],
                            "expr": { "expr": "1", "envs": {} }
                          }
                        },
                        "env8": {
                          "f": {
                            "corec": [],
                            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                          }
                        },
                        "env9": {
                          "cont": {
                            "corec": [],
                            "expr": { "expr": "fun x -> x", "envs": {} }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep))\n  ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[8]", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env5": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env8 ]) ((((f)[@env7 ]) ((x)[@env6 ])) :: rep)",
              "envs": {
                "env6": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env7": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env8": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep))\n  (((fun x -> 2 * x) ((x)[@env0 ])) :: ((rep)[@env1 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "rep": { "corec": [], "expr": { "expr": "[8]", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env4": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env7 ]) ((((f)[@env6 ]) ((x)[@env5 ])) :: rep)",
              "envs": {
                "env5": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env6": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env7": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  (((fun x -> 2 * x) 3) :: ((rep)[@env0 ]))",
      "envs": {
        "env0": {
          "rep": { "corec": [], "expr": { "expr": "[8]", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))\n  [((fun x -> 2 * x)) 3; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  [((2 * x)[@env0 ]); 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  [2 * ((x)[@env0 ]); 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))\n  [2 * 3; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep)) [6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep)",
              "envs": {
                "env3": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env4": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env5": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))[@env3 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "rep": { "corec": [], "expr": { "expr": "[6; 8]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[6; 8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[6; 8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[6; 8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": {
              "expr":
                "fun rep -> ((cont)[@env6 ]) ((((f)[@env5 ]) ((x)[@env4 ])) :: rep)",
              "envs": {
                "env4": {
                  "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
                },
                "env5": {
                  "f": {
                    "corec": [],
                    "expr": { "expr": "fun x -> 2 * x", "envs": {} }
                  }
                },
                "env6": {
                  "cont": {
                    "corec": [],
                    "expr": { "expr": "fun x -> x", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env5 ]) ((((f)[@env4 ]) ((x)[@env3 ])) :: rep))\n  ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[6; 8]", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env5": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env4 ]) ((((f)[@env3 ]) ((x)[@env2 ])) :: rep))\n  (((fun x -> 2 * x) ((x)[@env0 ])) :: ((rep)[@env1 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "rep": { "corec": [], "expr": { "expr": "[6; 8]", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env4": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  (((fun x -> 2 * x) 2) :: ((rep)[@env0 ]))",
      "envs": {
        "env0": {
          "rep": { "corec": [], "expr": { "expr": "[6; 8]", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))\n  [((fun x -> 2 * x)) 2; 6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  [((2 * x)[@env0 ]); 6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env3 ]) ((((f)[@env2 ]) ((x)[@env1 ])) :: rep))\n  [2 * ((x)[@env0 ]); 6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))\n  [2 * 2; 6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun rep -> ((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))\n  [4; 6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((((cont)[@env2 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: rep))[@env3 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        },
        "env3": {
          "rep": { "corec": [], "expr": { "expr": "[4; 6; 8]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[4; 6; 8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) (((((f)[@env1 ]) ((x)[@env0 ])) :: rep)[@env2 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[4; 6; 8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((cont)[@env3 ]) ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[4; 6; 8]", "envs": {} } }
        },
        "env3": {
          "cont": {
            "corec": [],
            "expr": { "expr": "fun x -> x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> x) ((((f)[@env1 ]) ((x)[@env0 ])) :: ((rep)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "rep": { "corec": [], "expr": { "expr": "[4; 6; 8]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> x) (((fun x -> 2 * x) ((x)[@env0 ])) :: ((rep)[@env1 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "rep": { "corec": [], "expr": { "expr": "[4; 6; 8]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun x -> x) (((fun x -> 2 * x) 1) :: ((rep)[@env0 ]))",
      "envs": {
        "env0": {
          "rep": { "corec": [], "expr": { "expr": "[4; 6; 8]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun x -> x) [((fun x -> 2 * x)) 1; 4; 6; 8]",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr": "(fun x -> x) [((2 * x)[@env0 ]); 4; 6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "(fun x -> x) [2 * ((x)[@env0 ]); 4; 6; 8]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun x -> x) [2 * 1; 4; 6; 8]",
      "envs": {}
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": { "expr": "(fun x -> x) [2; 4; 6; 8]", "envs": {} },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr": "((x)[@env0 ])",
      "envs": {
        "env0": {
          "x": {
            "corec": [],
            "expr": { "expr": "[2; 4; 6; 8]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": { "expr": "[2; 4; 6; 8]", "envs": {} },
    "step": []
  }
]