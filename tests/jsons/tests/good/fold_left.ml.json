[
  {
    "current_expression": {
      "expr": "((rev_and_mix [1; 2; 3])[@env0 ])",
      "envs": {
        "env0": {
          "rev_and_mix": {
            "corec": [],
            "expr": {
              "expr":
                "fun l -> ((fold_left (fun acc -> fun x -> append l (x :: acc)) l [])[@env1 ])",
              "envs": {
                "env1": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
                      "envs": {}
                    }
                  },
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((rev_and_mix)[@env0 ]) [1; 2; 3]",
      "envs": {
        "env0": {
          "rev_and_mix": {
            "corec": [],
            "expr": {
              "expr":
                "fun l -> ((fold_left (fun acc -> fun x -> append l (x :: acc)) l [])[@env1 ])",
              "envs": {
                "env1": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
                      "envs": {}
                    }
                  },
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l -> ((fold_left (fun acc -> fun x -> append l (x :: acc)) l [])\n   [@env0 ])) [1; 2; 3]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l ->\n   ((fold_left)[@env1 ]) ((fun acc -> fun x -> append l (x :: acc))[@env0 ])\n     l []) [1; 2; 3]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l ->\n   ((fold_left)[@env1 ])\n     (fun acc -> ((fun x -> append l (x :: acc))[@env0 ])) l []) [1; 2; 3]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1{...} with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l ->\n   ((fold_left)[@env1 ])\n     (fun acc -> fun x -> ((append l (x :: acc))[@env0 ])) l []) [1; 2; 3]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun l ->\n   ((fold_left)[@env1 ])\n     (fun acc -> fun x -> ((append)[@env0 ]) l (x :: acc)) l []) [1; 2; 3]",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((((fold_left)[@env1 ]) (fun acc -> fun x -> ((append)[@env0 ]) l (x :: acc))\n    l [])\n[@env2 ])",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((fun acc -> fun x -> ((append)[@env0 ]) l (x :: acc))\n  [@env1 ]) ((l)[@env2 ]) []",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> ((fun x -> ((append)[@env0 ]) l (x :: acc))[@env1 ])) ((l)\n  [@env2 ]) []",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((((append)[@env0 ]) l (x :: acc))[@env1 ])) ((l)\n  [@env2 ]) []",
      "envs": {
        "env0": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) ((l)\n  [@env2 ]) []",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env2 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [1; 2; 3]\n  []",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n  [@env2 ]) (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc))\n  [1; 2; 3] []",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n   [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [1; 2; 3]\n  []",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n     [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [1; 2; 3]\n  []",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a -> ((match l with | p::q -> fold_left f q (f a p) | [] -> a)\n       [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [1; 2; 3]\n  []",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a ->\n       match l with | p::q -> ((fold_left f q (f a p))[@env2 ]) | [] -> a)\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [1; 2; 3]\n  []",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f q (f a p))[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)",
              "envs": {
                "env2": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)",
              "envs": {
                "env4": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3] with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)",
              "envs": {
                "env3": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)",
              "envs": {
                "env3": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)",
              "envs": {
                "env2": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env2 ]) ((l)[@env1 ]) (x :: acc)",
              "envs": {
                "env1": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((f)[@env0 ]) ((q)[@env1 ]) ((f a p)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)",
              "envs": {
                "env4": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env2": {
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ]) ((f)[@env0 ]) ((q)[@env1 ])\n  (((f)[@env4 ]) ((a)[@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env9 ]) ((l)[@env8 ]) (x :: acc)",
              "envs": {
                "env8": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env9": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) ((q)\n  [@env2 ]) (((f)[@env5 ]) ((a)[@env3 ]) ((p)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env8 ]) ((l)[@env7 ]) (x :: acc)",
              "envs": {
                "env7": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env8": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((f)[@env4 ]) ((a)[@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)) ((a)\n     [@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)) [] ((p)\n     [@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)) [] 1)",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((((append)[@env3 ]) ((l)[@env2 ]) (x :: acc))[@env4 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "acc": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((append)[@env4 ]) ((l)[@env2 ]) ((x :: acc)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "acc": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((append)[@env4 ]) ((l)[@env2 ]) ((x :: acc)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "acc": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((append)[@env5 ]) ((l)[@env2 ]) (((x)[@env3 ]) :: ((acc)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "acc": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((append)[@env4 ]) [1; 2; 3] (((x)[@env2 ]) :: ((acc)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "acc": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((append)[@env3 ]) [1; 2; 3] (1 :: ((acc)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "acc": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((append)[@env2 ]) [1; 2; 3] [1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [1; 2; 3] [1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [1; 2; 3] [1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [1; 2; 3] [1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [1; 2; 3] [1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (match [1; 2; 3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((p :: (append q l2))[@env4 ][@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((p :: (append q l2))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((p :: (append q l2))[@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  ((p :: (append q l2))[@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((p)[@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  (((p)[@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: (((append)[@env3 ]) [2; 3] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: (((append)[@env2 ]) [2; 3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [2; 3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [2; 3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [2; 3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [2; 3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  ::\n  (match [2; 3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: ((p :: (append q l2))[@env4 ][@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: ((p :: (append q l2))[@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: ((p)[@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: ((p)[@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: (((append)[@env3 ]) [3] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: (((append)[@env2 ]) [3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [3] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 ::\n  (match [3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: ((p :: (append q l2))[@env4 ][@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: ((p :: (append q l2))[@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: ((p)[@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: ((p)[@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 :: (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 :: (((append)[@env3 ]) [] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 :: (((append)[@env2 ]) [] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [] [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2) []\n     [1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } },
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 ::\n  (match [] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env4": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3] (1\n  :: 2 :: 3 :: ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": { "corec": [], "expr": { "expr": "[1]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env2 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  [1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n  [@env2 ]) (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc))\n  [2; 3] [1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n   [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  [1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n     [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  [1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a -> ((match l with | p::q -> fold_left f q (f a p) | [] -> a)\n       [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  [1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a ->\n       match l with | p::q -> ((fold_left f q (f a p))[@env2 ]) | [] -> a)\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [2; 3]\n  [1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f q (f a p))[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)",
              "envs": {
                "env2": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)",
              "envs": {
                "env4": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [2; 3] with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)",
              "envs": {
                "env3": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)",
              "envs": {
                "env3": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)",
              "envs": {
                "env2": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env2 ]) ((l)[@env1 ]) (x :: acc)",
              "envs": {
                "env1": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((f)[@env0 ]) ((q)[@env1 ]) ((f a p)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)",
              "envs": {
                "env4": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ]) ((f)[@env0 ]) ((q)[@env1 ])\n  (((f)[@env4 ]) ((a)[@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env9 ]) ((l)[@env8 ]) (x :: acc)",
              "envs": {
                "env8": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env9": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) ((q)\n  [@env2 ]) (((f)[@env5 ]) ((a)[@env3 ]) ((p)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env8 ]) ((l)[@env7 ]) (x :: acc)",
              "envs": {
                "env7": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env8": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((f)[@env4 ]) ((a)[@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)) ((a)\n     [@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc))\n     [1; 2; 3; 1] ((p)[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc))\n     [1; 2; 3; 1] 2)",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((((append)[@env3 ]) ((l)[@env2 ]) (x :: acc))[@env4 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((append)[@env4 ]) ((l)[@env2 ]) ((x :: acc)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((append)[@env4 ]) ((l)[@env2 ]) ((x :: acc)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((append)[@env5 ]) ((l)[@env2 ]) (((x)[@env3 ]) :: ((acc)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((append)[@env4 ]) [1; 2; 3] (((x)[@env2 ]) :: ((acc)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((append)[@env3 ]) [1; 2; 3] (2 :: ((acc)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((append)[@env2 ]) [1; 2; 3] [2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [1; 2; 3] [2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [1; 2; 3] [2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [1; 2; 3] [2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [1; 2; 3] [2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  (match [1; 2; 3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] ((p\n  :: (append q l2))[@env4 ][@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] ((p\n  :: (append q l2))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] ((p\n  :: (append q l2))[@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] ((p\n  :: (append q l2))[@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (((p)\n  [@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (((p)\n  [@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  (((append)[@env3 ]) [2; 3] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  (((append)[@env2 ]) [2; 3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [2; 3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [2; 3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [2; 3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [2; 3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  (match [2; 3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((p :: (append q l2))[@env4 ][@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((p :: (append q l2))[@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((p)[@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  ((p)[@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: (((append)[@env3 ]) [3] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: (((append)[@env2 ]) [3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [3] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 ::\n  (match [3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: ((p :: (append q l2))[@env4 ][@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: ((p :: (append q l2))[@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: ((p)[@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: ((p)[@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 :: (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 :: (((append)[@env3 ]) [] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 :: (((append)[@env2 ]) [] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [] [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2) []\n     [2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 ::\n  (match [] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3] (1 ::\n  2 :: 3 :: ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env2 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  [1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n  [@env2 ]) (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc))\n  [3] [1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n   [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  [1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n     [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  [1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a -> ((match l with | p::q -> fold_left f q (f a p) | [] -> a)\n       [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  [1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a ->\n       match l with | p::q -> ((fold_left f q (f a p))[@env2 ]) | [] -> a)\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [3]\n  [1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f q (f a p))[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)",
              "envs": {
                "env2": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)",
              "envs": {
                "env4": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [3] with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)",
              "envs": {
                "env3": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)",
              "envs": {
                "env3": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)",
              "envs": {
                "env2": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f q (f a p))[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env2 ]) ((l)[@env1 ]) (x :: acc)",
              "envs": {
                "env1": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env2": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((f)[@env0 ]) ((q)[@env1 ]) ((f a p)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)",
              "envs": {
                "env4": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ]) ((f)[@env0 ]) ((q)[@env1 ])\n  (((f)[@env4 ]) ((a)[@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env9 ]) ((l)[@env8 ]) (x :: acc)",
              "envs": {
                "env8": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env9": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) ((q)\n  [@env2 ]) (((f)[@env5 ]) ((a)[@env3 ]) ((p)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env8 ]) ((l)[@env7 ]) (x :: acc)",
              "envs": {
                "env7": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env8": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((f)[@env4 ]) ((a)[@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env7 ]) ((l)[@env6 ]) (x :: acc)",
              "envs": {
                "env6": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env7": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)) ((a)\n     [@env2 ]) ((p)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc))\n     [1; 2; 3; 2; 1; 2; 3; 1] ((p)[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc))\n     [1; 2; 3; 2; 1; 2; 3; 1] 3)",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((((append)[@env3 ]) ((l)[@env2 ]) (x :: acc))[@env4 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((append)[@env4 ]) ((l)[@env2 ]) ((x :: acc)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((append)[@env4 ]) ((l)[@env2 ]) ((x :: acc)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((append)[@env5 ]) ((l)[@env2 ]) (((x)[@env3 ]) :: ((acc)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((append)[@env4 ]) [1; 2; 3] (((x)[@env2 ]) :: ((acc)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((append)[@env3 ]) [1; 2; 3] (3 :: ((acc)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "acc": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((append)[@env2 ]) [1; 2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [1; 2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [1; 2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [1; 2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [1; 2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  (match [1; 2; 3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] ((p ::\n  (append q l2))[@env4 ][@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] ((p ::\n  (append q l2))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] ((p ::\n  (append q l2))[@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] ((p ::\n  (append q l2))[@env2 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (((p)\n  [@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (((p)\n  [@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  (((append)[@env3 ]) [2; 3] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  (((append)[@env2 ]) [2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [2; 3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  (match [2; 3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((p :: (append q l2))[@env4 ][@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((p :: (append q l2))[@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((p)[@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  ((p)[@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: (((append)[@env3 ]) [3] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: (((append)[@env2 ]) [3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n     [3] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 ::\n  (match [3] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: ((p :: (append q l2))[@env4 ][@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: ((p :: (append q l2))[@env3 ][@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: ((p :: (append q l2))[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: ((p)[@env2 ]) :: ((append q l2)[@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: ((p)[@env2 ]) :: (((append)[@env5 ]) ((q)[@env3 ]) ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 :: (((append)[@env4 ]) ((q)[@env2 ]) ((l2)[@env3 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 :: (((append)[@env3 ]) [] ((l2)[@env2 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 :: (((append)[@env2 ]) [] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 ::\n  (((fun l1 ->\n       fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n     [@env2 ]) [] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 ::\n  ((fun l1 ->\n      ((fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n      [@env2 ])) [] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 ::\n  ((fun l1 ->\n      fun l2 -> ((match l1 with | p::q -> p :: (append q l2) | [] -> l2)\n        [@env2 ])) [] [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 ::\n  ((fun l1 ->\n      fun l2 ->\n        match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2) []\n     [3; 1; 2; 3; 2; 1; 2; 3; 1]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 ::\n  ((match l1 with | p::q -> ((p :: (append q l2))[@env2 ]) | [] -> l2)\n  [@env3 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          },
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env6 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 ::\n  (match ((l1)[@env5 ]) with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "l1": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env6": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 ::\n  (match [] with\n   | p::q -> ((p :: (append q l2))[@env3 ][@env2 ])\n   | [] -> ((l2)[@env4 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env3": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env4": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) [] (1 ::\n  2 :: 3 :: ((l2)[@env2 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "l2": {
            "corec": [],
            "expr": { "expr": "[3; 1; 2; 3; 2; 1; 2; 3; 1]", "envs": {} }
          }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env2 ])\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  [1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n  [@env2 ]) (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc))\n  [] [1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n   [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  [1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a)\n     [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  [1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a -> ((match l with | p::q -> fold_left f q (f a p) | [] -> a)\n       [@env2 ]))\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  [1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun a ->\n       match l with | p::q -> ((fold_left f q (f a p))[@env2 ]) | [] -> a)\n  (fun acc -> fun x -> ((append)[@env1 ]) ((l)[@env0 ]) (x :: acc)) []\n  [1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "append": {
            "corec": [ "append" ],
            "expr": {
              "expr":
                "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
              "envs": {}
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f q (f a p))[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env3 ]) ((l)[@env2 ]) (x :: acc)",
              "envs": {
                "env2": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env3": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": {
              "expr": "[1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env5 ]) ((l)[@env4 ]) (x :: acc)",
              "envs": {
                "env4": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env5": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": {
              "expr": "[1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": {
              "expr": "[1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [] with\n| p::q -> ((fold_left f q (f a p))[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l -> fun a -> match l with | p::q -> fold_left f q (f a p) | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr":
                "fun acc -> fun x -> ((append)[@env4 ]) ((l)[@env3 ]) (x :: acc)",
              "envs": {
                "env3": {
                  "l": {
                    "corec": [],
                    "expr": { "expr": "[1; 2; 3]", "envs": {} }
                  }
                },
                "env4": {
                  "append": {
                    "corec": [ "append" ],
                    "expr": {
                      "expr":
                        "fun l1 -> fun l2 -> match l1 with | p::q -> p :: (append q l2) | [] -> l2",
                      "envs": {}
                    }
                  }
                }
              }
            }
          },
          "a": {
            "corec": [],
            "expr": {
              "expr": "[1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
              "envs": {}
            }
          }
        },
        "env2": {
          "a": {
            "corec": [],
            "expr": {
              "expr": "[1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((a)[@env0 ])",
      "envs": {
        "env0": {
          "a": {
            "corec": [],
            "expr": {
              "expr": "[1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "[1; 2; 3; 3; 1; 2; 3; 2; 1; 2; 3; 1]",
      "envs": {}
    },
    "step": []
  }
]
