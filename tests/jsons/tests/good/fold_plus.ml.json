[
  {
    "current_expression": {
      "expr":
        "let rec fold_left f a l =\n  match l with | p::q -> fold_left f (f a p) q | [] -> a in\nfold_left (+) 0 [1; 2; 3; 4]",
      "envs": {}
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left (+) 0 [1; 2; 3; 4])[@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n  [@env0 ]) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n   [@env0 ])) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     ((fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n     [@env0 ])) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l -> ((match l with | p::q -> fold_left f (f a p) q | [] -> a)\n       [@env0 ])) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l ->\n       match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n  (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3; 4] with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((f)[@env0 ]) ((f a p)[@env1 ]) ((q)[@env2 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": {
          "p": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((a)[@env1 ]) ((p)[@env2 ])) ((q)[@env4 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ]) (+) (((f)[@env2 ]) ((a)[@env0 ]) ((p)[@env1 ])) ((q)\n  [@env3 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) (+) (((a)[@env0 ]) + ((p)[@env1 ])) ((q)[@env2 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env2 ]) (+) (0 + ((p)[@env0 ])) ((q)[@env1 ])",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env1 ]) (+) (0 + 1) ((q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (0 + 1) [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n  [@env0 ]) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n   [@env0 ])) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     ((fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n     [@env0 ])) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l -> ((match l with | p::q -> fold_left f (f a p) q | [] -> a)\n       [@env0 ])) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l ->\n       match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n  (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[2; 3; 4]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [2; 3; 4] with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((f)[@env0 ]) ((f a p)[@env1 ]) ((q)[@env2 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": {
          "p": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((a)[@env1 ]) ((p)[@env2 ])) ((q)[@env4 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ]) (+) (((f)[@env2 ]) ((a)[@env0 ]) ((p)[@env1 ])) ((q)\n  [@env3 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) (+) (((a)[@env0 ]) + ((p)[@env1 ])) ((q)[@env2 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env2 ]) (+) (1 + ((p)[@env0 ])) ((q)[@env1 ])",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env1 ]) (+) (1 + 2) ((q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (1 + 2) [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n  [@env0 ]) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n   [@env0 ])) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     ((fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n     [@env0 ])) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l -> ((match l with | p::q -> fold_left f (f a p) q | [] -> a)\n       [@env0 ])) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l ->\n       match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n  (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [3; 4] with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((f)[@env0 ]) ((f a p)[@env1 ]) ((q)[@env2 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": {
          "p": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((a)[@env1 ]) ((p)[@env2 ])) ((q)[@env4 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ]) (+) (((f)[@env2 ]) ((a)[@env0 ]) ((p)[@env1 ])) ((q)\n  [@env3 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) (+) (((a)[@env0 ]) + ((p)[@env1 ])) ((q)[@env2 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env2 ]) (+) (3 + ((p)[@env0 ])) ((q)[@env1 ])",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env1 ]) (+) (3 + 3) ((q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (3 + 3) [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n  [@env0 ]) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n   [@env0 ])) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     ((fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n     [@env0 ])) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l -> ((match l with | p::q -> fold_left f (f a p) q | [] -> a)\n       [@env0 ])) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l ->\n       match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n  (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[4]", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[4]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [4] with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) ((f)[@env0 ]) ((f a p)[@env1 ]) ((q)[@env2 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": {
          "p": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((a)[@env1 ]) ((p)[@env2 ])) ((q)[@env4 ])",
      "envs": {
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env4": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env5": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env4 ]) (+) (((f)[@env2 ]) ((a)[@env0 ]) ((p)[@env1 ])) ((q)\n  [@env3 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } }
        },
        "env3": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((fold_left)[@env3 ]) (+) (((a)[@env0 ]) + ((p)[@env1 ])) ((q)[@env2 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env2 ]) (+) (6 + ((p)[@env0 ])) ((q)[@env1 ])",
      "envs": {
        "env0": { "p": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env1 ]) (+) (6 + 4) ((q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (6 + 4) []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n  [@env0 ]) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n   [@env0 ])) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     ((fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n     [@env0 ])) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l -> ((match l with | p::q -> fold_left f (f a p) q | [] -> a)\n       [@env0 ])) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun a ->\n     fun l ->\n       match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n  (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a)\n[@env1 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [] with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env0 ])\n| [] -> ((a)[@env2 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((a)[@env0 ])",
      "envs": {
        "env0": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "10", "envs": {} }, "step": [] }
]