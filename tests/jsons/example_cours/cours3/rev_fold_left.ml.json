[
  {
    "current_expression": {
      "expr": "((rev [0; 1; 2; 3; 4; 5; 6])[@env0 ])",
      "envs": {
        "env0": {
          "rev": {
            "corec": [],
            "expr": {
              "expr":
                "fun xs -> ((List.fold_left (fun r -> fun x -> x :: r) [] xs)[@env1 ])",
              "envs": {
                "env1": {
                  "List.fold_left": {
                    "corec": [ "List.fold_left" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((rev)[@env0 ]) [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "rev": {
            "corec": [],
            "expr": {
              "expr":
                "fun xs -> ((List.fold_left (fun r -> fun x -> x :: r) [] xs)[@env1 ])",
              "envs": {
                "env1": {
                  "List.fold_left": {
                    "corec": [ "List.fold_left" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs -> ((List.fold_left (fun r -> fun x -> x :: r) [] xs)[@env0 ]))\n  [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs -> ((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [] xs)\n  [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [] xs)[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) [] ((xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) []\n  [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [] [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [] [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [] [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [] [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [] [0; 1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [0; 1; 2; 3; 4; 5; 6] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun r -> fun x -> x :: r)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [] ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [] 0) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [] 0) [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r) (((x)[@env0 ]) :: ((r)\n  [@env1 ])) [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) (0 :: ((r)[@env0 ]))\n  [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [0] [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [0] [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [0] [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [0] [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [0] [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [0] [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3; 4; 5; 6] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun r -> fun x -> x :: r)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [0] ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [0] 1) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [0] 1) [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r) (((x)[@env0 ]) :: ((r)\n  [@env1 ])) [2; 3; 4; 5; 6]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) (1 :: ((r)[@env0 ]))\n  [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "[0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [1; 0] [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [1; 0] [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [1; 0] [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [1; 0] [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [1; 0] [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [1; 0] [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [2; 3; 4; 5; 6] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun r -> fun x -> x :: r)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [1; 0] ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [1; 0] 2) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [1; 0] 2) [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r) (((x)[@env0 ]) :: ((r)\n  [@env1 ])) [3; 4; 5; 6]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) (2 :: ((r)[@env0 ]))\n  [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "[1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [2; 1; 0] [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [2; 1; 0] [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [2; 1; 0] [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [2; 1; 0] [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [2; 1; 0] [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [2; 1; 0] [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [3; 4; 5; 6] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun r -> fun x -> x :: r)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [2; 1; 0] ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [2; 1; 0] 3) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [2; 1; 0] 3) [4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[2; 1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [4; 5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "r": { "corec": [], "expr": { "expr": "[2; 1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r) (((x)[@env0 ]) :: ((r)\n  [@env1 ])) [4; 5; 6]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "[2; 1; 0]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) (3 :: ((r)[@env0 ]))\n  [4; 5; 6]",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "[2; 1; 0]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [3; 2; 1; 0] [4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [3; 2; 1; 0] [4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [3; 2; 1; 0] [4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [3; 2; 1; 0] [4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [3; 2; 1; 0] [4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [3; 2; 1; 0] [4; 5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [4; 5; 6] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun r -> fun x -> x :: r)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [3; 2; 1; 0] ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [3; 2; 1; 0] 4) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [3; 2; 1; 0] 4) [5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "r": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ])\n  [5; 6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "r": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r) (((x)[@env0 ]) :: ((r)\n  [@env1 ])) [5; 6]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "r": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) (4 :: ((r)[@env0 ]))\n  [5; 6]",
      "envs": {
        "env0": {
          "r": {
            "corec": [],
            "expr": { "expr": "[3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] [5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] [5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] [5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] [5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] [5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] [5; 6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [5; 6] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun r -> fun x -> x :: r)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] 5) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [4; 3; 2; 1; 0] 5) [6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ]) [6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "r": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ]) [6]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "r": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r) (((x)[@env0 ]) :: ((r)\n  [@env1 ])) [6]",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "r": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) (5 :: ((r)[@env0 ]))\n  [6]",
      "envs": {
        "env0": {
          "r": {
            "corec": [],
            "expr": { "expr": "[4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] [6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] [6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] [6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] [6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] [6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] [6]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[6]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [6] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env1": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun r -> fun x -> x :: r)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] 6) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r)\n  ((fun r -> fun x -> x :: r) [5; 4; 3; 2; 1; 0] 6) []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ]) []",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "r": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) ((x :: r)[@env0 ]) []",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "r": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun r -> fun x -> x :: r) (((x)[@env0 ]) :: ((r)\n  [@env1 ])) []",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "r": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun r -> fun x -> x :: r) (6 :: ((r)[@env0 ])) []",
      "envs": {
        "env0": {
          "r": {
            "corec": [],
            "expr": { "expr": "[5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun r -> fun x -> x :: r) [6; 5; 4; 3; 2; 1; 0]\n  []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun r -> fun x -> x :: r) [6; 5; 4; 3; 2; 1; 0] []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun r -> fun x -> x :: r) [6; 5; 4; 3; 2; 1; 0] []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun r -> fun x -> x :: r) [6; 5; 4; 3; 2; 1; 0] []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun r -> fun x -> x :: r) [6; 5; 4; 3; 2; 1; 0] []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun r -> fun x -> x :: r) [6; 5; 4; 3; 2; 1; 0] []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[6; 5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[6; 5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[6; 5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[6; 5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun r -> fun x -> x :: r", "envs": {} }
          },
          "accu": {
            "corec": [],
            "expr": { "expr": "[6; 5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((accu)[@env0 ])",
      "envs": {
        "env0": {
          "accu": {
            "corec": [],
            "expr": { "expr": "[6; 5; 4; 3; 2; 1; 0]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": { "expr": "[6; 5; 4; 3; 2; 1; 0]", "envs": {} },
    "step": []
  }
]