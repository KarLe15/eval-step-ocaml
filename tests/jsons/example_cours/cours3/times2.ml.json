[
  {
    "current_expression": {
      "expr": "((List.map (fun x -> 2 * x) [1; 2; 3])[@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((List.map)[@env0 ]) (fun x -> 2 * x) [1; 2; 3]",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun ll ->\n      match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n  [@env0 ]) (fun x -> 2 * x) [1; 2; 3]",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun ll ->\n       match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n   [@env0 ])) (fun x -> 2 * x) [1; 2; 3]",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun ll ->\n     ((match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n     [@env0 ])) (fun x -> 2 * x) [1; 2; 3]",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun ll ->\n     match ll with\n     | [] -> []\n     | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n  (fun x -> 2 * x) [1; 2; 3]",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match ll with\n  | [] -> []\n  | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ll": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((ll)[@env2 ]) with\n| [] -> []\n| a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "ll": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3] with\n| [] -> []\n| a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((let r = f a in r :: (List.map f l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((let r = f a in r :: (List.map f l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((let r = f a in r :: (List.map f l))[@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "let r = ((f a)[@env1 ]) in ((r :: (List.map f l))[@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "let r = ((f a)[@env1 ]) in ((r :: (List.map f l))[@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "let r = ((f a)[@env1 ]) in r :: ((List.map f l)[@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = ((f a)[@env3 ]) in r ::\n  (((List.map)[@env2 ]) ((f)[@env0 ]) ((l)[@env1 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env2": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = ((f)[@env4 ]) ((a)[@env3 ]) in r ::\n  (((List.map)[@env2 ]) ((f)[@env0 ]) ((l)[@env1 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env2": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env3": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = ((f)[@env3 ]) ((a)[@env2 ]) in r ::\n  (((List.map)[@env1 ]) (fun x -> 2 * x) ((l)[@env0 ]))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env1": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = ((f)[@env2 ]) ((a)[@env1 ]) in r ::\n  (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = (fun x -> 2 * x) ((a)[@env1 ]) in r ::\n  (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = (fun x -> 2 * x) 1 in r ::\n  (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = ((2 * x)[@env1 ]) in r ::\n  (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = 2 * ((x)[@env1 ]) in r ::\n  (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = 2 * 1 in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "let r = 2 in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3]))[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3]))[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((r)[@env0 ]) :: (((List.map)[@env1 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "2 :: (((List.map)[@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(((fun f ->\n     fun ll ->\n       match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n   [@env0 ]) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n((fun f ->\n    ((fun ll ->\n        match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n    [@env0 ])) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n((fun f ->\n    fun ll ->\n      ((match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n      [@env0 ])) (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n((fun f ->\n    fun ll ->\n      match ll with\n      | [] -> []\n      | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n   (fun x -> 2 * x) [2; 3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n((match ll with\n  | [] -> []\n  | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ll": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(match ((ll)[@env2 ]) with\n | [] -> []\n | a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "ll": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(match [2; 3] with\n | [] -> []\n | a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: ((let r = f a in r :: (List.map f l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "2 :: ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "2 :: ((let r = f a in r :: (List.map f l))[@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: (let r = ((f a)[@env1 ]) in ((r :: (List.map f l))[@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: (let r = ((f a)[@env1 ]) in ((r :: (List.map f l))[@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: (let r = ((f a)[@env1 ]) in r :: ((List.map f l)[@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = ((f a)[@env3 ]) in r ::\n   (((List.map)[@env2 ]) ((f)[@env0 ]) ((l)[@env1 ])))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = ((f)[@env4 ]) ((a)[@env3 ]) in r ::\n   (((List.map)[@env2 ]) ((f)[@env0 ]) ((l)[@env1 ])))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env3": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = ((f)[@env3 ]) ((a)[@env2 ]) in r ::\n   (((List.map)[@env1 ]) (fun x -> 2 * x) ((l)[@env0 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env1": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = ((f)[@env2 ]) ((a)[@env1 ]) in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = (fun x -> 2 * x) ((a)[@env1 ]) in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = (fun x -> 2 * x) 2 in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = ((2 * x)[@env1 ]) in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 ::\n(let r = 2 * ((x)[@env1 ]) in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: (let r = 2 * 2 in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: (let r = 4 in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: ((r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: ((r :: (((List.map)[@env0 ]) (fun x -> 2 * x) [3]))[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: ((r)[@env0 ]) :: (((List.map)[@env1 ]) (fun x -> 2 * x) [3])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "2 :: 4 :: (((List.map)[@env0 ]) (fun x -> 2 * x) [3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(((fun f ->\n     fun ll ->\n       match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n   [@env0 ]) (fun x -> 2 * x) [3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n((fun f ->\n    ((fun ll ->\n        match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n    [@env0 ])) (fun x -> 2 * x) [3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n((fun f ->\n    fun ll ->\n      ((match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n      [@env0 ])) (fun x -> 2 * x) [3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n((fun f ->\n    fun ll ->\n      match ll with\n      | [] -> []\n      | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n   (fun x -> 2 * x) [3])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n((match ll with\n  | [] -> []\n  | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ll": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(match ((ll)[@env2 ]) with\n | [] -> []\n | a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "ll": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(match [3] with\n | [] -> []\n | a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: ((let r = f a in r :: (List.map f l))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "2 :: 4 :: ((let r = f a in r :: (List.map f l))[@env0 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: (let r = ((f a)[@env1 ]) in ((r :: (List.map f l))[@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: (let r = ((f a)[@env1 ]) in ((r :: (List.map f l))[@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: (let r = ((f a)[@env1 ]) in r :: ((List.map f l)[@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = ((f a)[@env3 ]) in r ::\n   (((List.map)[@env2 ]) ((f)[@env0 ]) ((l)[@env1 ])))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = ((f)[@env4 ]) ((a)[@env3 ]) in r ::\n   (((List.map)[@env2 ]) ((f)[@env0 ]) ((l)[@env1 ])))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env3": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = ((f)[@env3 ]) ((a)[@env2 ]) in r ::\n   (((List.map)[@env1 ]) (fun x -> 2 * x) ((l)[@env0 ])))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = ((f)[@env2 ]) ((a)[@env1 ]) in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) []))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = (fun x -> 2 * x) ((a)[@env1 ]) in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) []))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = (fun x -> 2 * x) 3 in r ::\n   (((List.map)[@env0 ]) (fun x -> 2 * x) []))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = ((2 * x)[@env1 ]) in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) []))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 ::\n(let r = 2 * ((x)[@env1 ]) in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) []))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: (let r = 2 * 3 in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) []))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: (let r = 6 in r :: (((List.map)[@env0 ]) (fun x -> 2 * x) []))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: ((r :: (((List.map)[@env0 ]) (fun x -> 2 * x) []))[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: ((r :: (((List.map)[@env0 ]) (fun x -> 2 * x) []))[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: ((r)[@env0 ]) :: (((List.map)[@env1 ]) (fun x -> 2 * x) [])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "2 :: 4 :: 6 :: (((List.map)[@env0 ]) (fun x -> 2 * x) [])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: 6 ::\n(((fun f ->\n     fun ll ->\n       match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n   [@env0 ]) (fun x -> 2 * x) [])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: 6 ::\n((fun f ->\n    ((fun ll ->\n        match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n    [@env0 ])) (fun x -> 2 * x) [])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: 6 ::\n((fun f ->\n    fun ll ->\n      ((match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l))\n      [@env0 ])) (fun x -> 2 * x) [])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: 6 ::\n((fun f ->\n    fun ll ->\n      match ll with\n      | [] -> []\n      | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n   (fun x -> 2 * x) [])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: 6 ::\n((match ll with\n  | [] -> []\n  | a::l -> ((let r = f a in r :: (List.map f l))[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ll": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: 6 ::\n(match ((ll)[@env2 ]) with\n | [] -> []\n | a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        },
        "env2": {
          "ll": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "2 :: 4 :: 6 ::\n(match [] with\n | [] -> []\n | a::l -> ((let r = f a in r :: (List.map f l))[@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.map": {
            "corec": [ "List.map" ],
            "expr": {
              "expr":
                "fun f ->\n  fun ll ->\n    match ll with | [] -> [] | a::l -> let r = f a in r :: (List.map f l)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": { "expr": "fun x -> 2 * x", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  { "current_expression": { "expr": "[2; 4; 6]", "envs": {} }, "step": [] }
]