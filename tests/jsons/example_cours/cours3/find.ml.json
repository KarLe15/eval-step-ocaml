[
  {
    "current_expression": {
      "expr": "((find (fun x -> (x mod 5) = 0) [1; 2; 3; 4; 5; 6])[@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env0 ]) (fun x -> (x mod 5) = 0) [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun p ->\n    fun xs ->\n      match xs with\n      | [] -> raise Not_found\n      | x::xs -> if p x then x else find p xs)[@env0 ])\n  (fun x -> (x mod 5) = 0) [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   ((fun xs ->\n       match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n   [@env0 ])) (fun x -> (x mod 5) = 0) [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     ((match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n     [@env0 ])) (fun x -> (x mod 5) = 0) [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     match xs with\n     | [] -> raise Not_found\n     | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n  (fun x -> (x mod 5) = 0) [1; 2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with\n  | [] -> raise Not_found\n  | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env2 ]) with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[1; 2; 3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3; 4; 5; 6] with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 1 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (1 mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if 1 = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if false then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env2 ]) ((p)[@env0 ]) ((xs)[@env1 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env2": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env1 ]) (fun x -> (x mod 5) = 0) ((xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        },
        "env1": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env0 ]) (fun x -> (x mod 5) = 0) [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun p ->\n    fun xs ->\n      match xs with\n      | [] -> raise Not_found\n      | x::xs -> if p x then x else find p xs)[@env0 ])\n  (fun x -> (x mod 5) = 0) [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   ((fun xs ->\n       match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n   [@env0 ])) (fun x -> (x mod 5) = 0) [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     ((match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n     [@env0 ])) (fun x -> (x mod 5) = 0) [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     match xs with\n     | [] -> raise Not_found\n     | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n  (fun x -> (x mod 5) = 0) [2; 3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with\n  | [] -> raise Not_found\n  | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env2 ]) with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[2; 3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [2; 3; 4; 5; 6] with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 2 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (2 mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if 2 = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if false then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env2 ]) ((p)[@env0 ]) ((xs)[@env1 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env2": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env1 ]) (fun x -> (x mod 5) = 0) ((xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        },
        "env1": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env0 ]) (fun x -> (x mod 5) = 0) [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun p ->\n    fun xs ->\n      match xs with\n      | [] -> raise Not_found\n      | x::xs -> if p x then x else find p xs)[@env0 ])\n  (fun x -> (x mod 5) = 0) [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   ((fun xs ->\n       match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n   [@env0 ])) (fun x -> (x mod 5) = 0) [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     ((match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n     [@env0 ])) (fun x -> (x mod 5) = 0) [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     match xs with\n     | [] -> raise Not_found\n     | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n  (fun x -> (x mod 5) = 0) [3; 4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with\n  | [] -> raise Not_found\n  | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env2 ]) with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[3; 4; 5; 6]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [3; 4; 5; 6] with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 3 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (3 mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if 3 = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if false then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env2 ]) ((p)[@env0 ]) ((xs)[@env1 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env2": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env1 ]) (fun x -> (x mod 5) = 0) ((xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        },
        "env1": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env0 ]) (fun x -> (x mod 5) = 0) [4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun p ->\n    fun xs ->\n      match xs with\n      | [] -> raise Not_found\n      | x::xs -> if p x then x else find p xs)[@env0 ])\n  (fun x -> (x mod 5) = 0) [4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   ((fun xs ->\n       match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n   [@env0 ])) (fun x -> (x mod 5) = 0) [4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     ((match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n     [@env0 ])) (fun x -> (x mod 5) = 0) [4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     match xs with\n     | [] -> raise Not_found\n     | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n  (fun x -> (x mod 5) = 0) [4; 5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with\n  | [] -> raise Not_found\n  | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env2 ]) with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[4; 5; 6]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [4; 5; 6] with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 4 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (4 mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if 4 = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if false then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env2 ]) ((p)[@env0 ]) ((xs)[@env1 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env2": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env1 ]) (fun x -> (x mod 5) = 0) ((xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        },
        "env1": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((find)[@env0 ]) (fun x -> (x mod 5) = 0) [5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun p ->\n    fun xs ->\n      match xs with\n      | [] -> raise Not_found\n      | x::xs -> if p x then x else find p xs)[@env0 ])\n  (fun x -> (x mod 5) = 0) [5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   ((fun xs ->\n       match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n   [@env0 ])) (fun x -> (x mod 5) = 0) [5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     ((match xs with\n       | [] -> raise Not_found\n       | x::xs -> if p x then x else find p xs)\n     [@env0 ])) (fun x -> (x mod 5) = 0) [5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun xs ->\n     match xs with\n     | [] -> raise Not_found\n     | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n  (fun x -> (x mod 5) = 0) [5; 6]",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with\n  | [] -> raise Not_found\n  | x::xs -> ((if p x then x else find p xs)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env2 ]) with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[5; 6]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [5; 6] with\n| [] -> raise Not_found\n| x::xs -> ((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 5 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ]) then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (5 mod 5) = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if 0 = 0 then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if true then ((x)[@env1 ]) else ((find p xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": { "corec": [], "expr": { "expr": "[6]", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "find": {
            "corec": [ "find" ],
            "expr": {
              "expr":
                "fun p ->\n  fun xs ->\n    match xs with\n    | [] -> raise Not_found\n    | x::xs -> if p x then x else find p xs",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((x)[@env0 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "5", "envs": {} }, "step": [] }
]