[
  {
    "current_expression": {
      "expr": "((find_max [5; 6; 7; 8; 9; 10; 0; 1; 2; 3])[@env0 ])",
      "envs": {
        "env0": {
          "find_max": {
            "corec": [],
            "expr": {
              "expr":
                "fun xs ->\n  ((match xs with\n    | [] -> raise (Invalid_argument \"find_max\")\n    | x::xs -> List.fold_left max x xs)\n  [@env1 ])",
              "envs": {
                "env1": {
                  "List.fold_left": {
                    "corec": [ "List.fold_left" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
                      "envs": {}
                    }
                  },
                  "max": {
                    "corec": [],
                    "expr": {
                      "expr": "fun x -> fun y -> if x >= y then x else y",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((find_max)[@env0 ]) [5; 6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "find_max": {
            "corec": [],
            "expr": {
              "expr":
                "fun xs ->\n  ((match xs with\n    | [] -> raise (Invalid_argument \"find_max\")\n    | x::xs -> List.fold_left max x xs)\n  [@env1 ])",
              "envs": {
                "env1": {
                  "List.fold_left": {
                    "corec": [ "List.fold_left" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
                      "envs": {}
                    }
                  },
                  "max": {
                    "corec": [],
                    "expr": {
                      "expr": "fun x -> fun y -> if x >= y then x else y",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs ->\n   ((match xs with\n     | [] -> raise (Invalid_argument \"find_max\")\n     | x::xs -> List.fold_left max x xs)\n   [@env0 ])) [5; 6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs ->\n   match xs with\n   | [] -> raise (Invalid_argument \"find_max\")\n   | x::xs -> ((List.fold_left max x xs)[@env0 ]))\n  [5; 6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with\n  | [] -> raise (Invalid_argument \"find_max\")\n  | x::xs -> ((List.fold_left max x xs)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[5; 6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env1 ]) with\n| [] -> raise (Invalid_argument \"find_max\")\n| x::xs -> ((List.fold_left max x xs)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[5; 6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [5; 6; 7; 8; 9; 10; 0; 1; 2; 3] with\n| [] -> raise (Invalid_argument \"find_max\")\n| x::xs -> ((List.fold_left max x xs)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left max x xs)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left max x xs)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((max)[@env0 ]) ((x)[@env1 ]) ((xs)[@env2 ])",
      "envs": {
        "env0": {
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y) ((x)\n  [@env0 ]) ((xs)[@env1 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) 5\n  ((xs)[@env0 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 5\n  [6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 5\n  [6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 5\n  [6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 5\n  [6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 5\n  [6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 5 [6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [6; 7; 8; 9; 10; 0; 1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 5 ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 5 6) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 5 6) [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 5 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 5 >= 6 then ((x)[@env1 ]) else ((y)[@env0 ])) [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if false then ((x)[@env1 ]) else ((y)[@env0 ])) [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((y)\n  [@env0 ]) [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 6\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 6\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 6\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 6\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 6\n  [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 6 [7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [7; 8; 9; 10; 0; 1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 6 ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 6 7) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 6 7) [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "7", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "7", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 6 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 6 >= 7 then ((x)[@env1 ]) else ((y)[@env0 ])) [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if false then ((x)[@env1 ]) else ((y)[@env0 ])) [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((y)\n  [@env0 ]) [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 7\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 7\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 7\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 7\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 7\n  [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 7 [8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [8; 9; 10; 0; 1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 7 ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 7 8) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 7 8) [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "8", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "8", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 7 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 7 >= 8 then ((x)[@env1 ]) else ((y)[@env0 ])) [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if false then ((x)[@env1 ]) else ((y)[@env0 ])) [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((y)\n  [@env0 ]) [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 8\n  [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 8 [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 8\n  [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 8\n  [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 8\n  [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 8 [9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [9; 10; 0; 1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 8 ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 8 9) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 8 9) [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "9", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "9", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 8 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 8 >= 9 then ((x)[@env1 ]) else ((y)[@env0 ])) [10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if false then ((x)[@env1 ]) else ((y)[@env0 ])) [10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((y)\n  [@env0 ]) [10; 0; 1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 9\n  [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 9 [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 9 [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 9\n  [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 9\n  [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 9 [10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [10; 0; 1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env2": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env1": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env1": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 9 ((a)[@env0 ])) ((l)[@env1 ])",
      "envs": {
        "env0": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 9 10) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 9 10) [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env3": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 9 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 9 >= 10 then ((x)[@env1 ]) else ((y)[@env0 ])) [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if false then ((x)[@env1 ]) else ((y)[@env0 ])) [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((y)\n  [@env0 ]) [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10\n  [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10 [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 10 [0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [0; 1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 ((a)[@env0 ])) ((l)\n  [@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 0) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 0) [1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [1; 2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": { "y": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "y": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= 0 then ((x)[@env1 ]) else ((y)[@env0 ])) [1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if true then ((x)[@env1 ]) else ((y)[@env0 ])) [1; 2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((x)\n  [@env0 ]) [1; 2; 3]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10\n  [1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10 [1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 10 [1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 ((a)[@env0 ])) ((l)\n  [@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 1) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 1) [2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [2; 3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": { "y": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "y": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= 1 then ((x)[@env1 ]) else ((y)[@env0 ])) [2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if true then ((x)[@env1 ]) else ((y)[@env0 ])) [2; 3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((x)\n  [@env0 ]) [2; 3]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10\n  [2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10 [2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 10 [2; 3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 ((a)[@env0 ])) ((l)\n  [@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 2) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 2) [3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) [3]",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  [3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": { "y": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) [3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "y": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= 2 then ((x)[@env1 ]) else ((y)[@env0 ])) [3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if true then ((x)[@env1 ]) else ((y)[@env0 ])) [3]",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((x)\n  [@env0 ]) [3]",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10 [3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10 [3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 [3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 10 [3]",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) ((f)[@env0 ]) ((f accu a)[@env1 ]) ((l)[@env2 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env5 ]) ((f)[@env0 ])\n  (((f)[@env3 ]) ((accu)[@env1 ]) ((a)[@env2 ])) ((l)[@env4 ])",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env4": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env5": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (((f)[@env2 ]) ((accu)[@env0 ]) ((a)[@env1 ])) ((l)[@env3 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) ((accu)[@env0 ]) ((a)[@env1 ]))\n  ((l)[@env2 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 ((a)[@env0 ])) ((l)\n  [@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 3) ((l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((fun x -> fun y -> if x >= y then x else y) 10 3) []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  ((if x >= y then x else y)[@env0 ]) []",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) []",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env4 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))\n  []",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": { "y": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env3 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])) []",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "y": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if 10 >= 3 then ((x)[@env1 ]) else ((y)[@env0 ])) []",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n  (if true then ((x)[@env1 ]) else ((y)[@env0 ])) []",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env1 ]) (fun x -> fun y -> if x >= y then x else y) ((x)\n  [@env0 ]) []",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_left)[@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10 []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun accu ->\n      fun l ->\n        match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y) 10 []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun accu ->\n       fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     ((fun l ->\n         match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       ((match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l)\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y) 10 []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) 10 []",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((List.fold_left f (f accu a) l)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((List.fold_left f (f accu a) l)[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_left": {
            "corec": [ "List.fold_left" ],
            "expr": {
              "expr":
                "fun f ->\n  fun accu ->\n    fun l ->\n      match l with | [] -> accu | a::l -> List.fold_left f (f accu a) l",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((accu)[@env0 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "10", "envs": {} }, "step": [] }
]