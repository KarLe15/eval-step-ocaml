[
  {
    "current_expression": {
      "expr": "((app [1; 2; 3] [4; 5; 6; 7])[@env0 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((app)[@env0 ]) [1; 2; 3] [4; 5; 6; 7]",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n  [@env0 ]) [1; 2; 3] [4; 5; 6; 7]",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs -> ((fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n   [@env0 ])) [1; 2; 3] [4; 5; 6; 7]",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs ->\n   fun ys -> ((match xs with | [] -> ys | x::zs -> x :: (app zs ys))[@env0 ]))\n  [1; 2; 3] [4; 5; 6; 7]",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs ->\n   fun ys -> match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ]))\n  [1; 2; 3] [4; 5; 6; 7]",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ]))[@env1 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "xs": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env3 ]) with\n| [] -> ((ys)[@env0 ])\n| x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env3": {
          "xs": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [1; 2; 3] with\n| [] -> ((ys)[@env0 ])\n| x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((x :: (app zs ys))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env2": {
          "zs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((x :: (app zs ys))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((x :: (app zs ys))[@env0 ])",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((x :: (app zs ys))[@env0 ])",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((x)[@env0 ]) :: ((app zs ys)[@env1 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((x)[@env0 ]) :: (((app)[@env3 ]) ((zs)[@env1 ]) ((ys)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env3": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: (((app)[@env2 ]) ((zs)[@env0 ]) ((ys)[@env1 ]))",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env2": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: (((app)[@env1 ]) [2; 3] ((ys)[@env0 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: (((app)[@env0 ]) [2; 3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "1 ::\n(((fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n   [@env0 ]) [2; 3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 ::\n((fun xs -> ((fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n    [@env0 ])) [2; 3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 ::\n((fun xs ->\n    fun ys -> ((match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n      [@env0 ])) [2; 3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 ::\n((fun xs ->\n    fun ys ->\n      match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ]))\n   [2; 3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: ((match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "xs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 ::\n(match ((xs)[@env3 ]) with\n | [] -> ((ys)[@env0 ])\n | x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env3": {
          "xs": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "1 ::\n(match [2; 3] with\n | [] -> ((ys)[@env0 ])\n | x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "1 :: ((x :: (app zs ys))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env2": {
          "zs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "1 :: ((x :: (app zs ys))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "1 :: ((x :: (app zs ys))[@env0 ])",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "1 :: ((x :: (app zs ys))[@env0 ])",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "1 :: ((x)[@env0 ]) :: ((app zs ys)[@env1 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: ((x)[@env0 ]) :: (((app)[@env3 ]) ((zs)[@env1 ]) ((ys)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env3": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: (((app)[@env2 ]) ((zs)[@env0 ]) ((ys)[@env1 ]))",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env2": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: (((app)[@env1 ]) [3] ((ys)[@env0 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: (((app)[@env0 ]) [3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 ::\n(((fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n   [@env0 ]) [3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 ::\n((fun xs -> ((fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n    [@env0 ])) [3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 ::\n((fun xs ->\n    fun ys -> ((match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n      [@env0 ])) [3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 ::\n((fun xs ->\n    fun ys ->\n      match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ])) \n   [3] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: ((match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "xs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 ::\n(match ((xs)[@env3 ]) with\n | [] -> ((ys)[@env0 ])\n | x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env3": {
          "xs": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 ::\n(match [3] with\n | [] -> ((ys)[@env0 ])\n | x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: ((x :: (app zs ys))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env2": {
          "zs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: ((x :: (app zs ys))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: ((x :: (app zs ys))[@env0 ])",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: ((x :: (app zs ys))[@env0 ])",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: ((x)[@env0 ]) :: ((app zs ys)[@env1 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: ((x)[@env0 ]) :: (((app)[@env3 ]) ((zs)[@env1 ]) ((ys)[@env2 ]))",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "zs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env3": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 :: (((app)[@env2 ]) ((zs)[@env0 ]) ((ys)[@env1 ]))",
      "envs": {
        "env0": {
          "zs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env2": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: 3 :: (((app)[@env1 ]) [] ((ys)[@env0 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: 3 :: (((app)[@env0 ]) [] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 ::\n(((fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n   [@env0 ]) [] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 ::\n((fun xs -> ((fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n    [@env0 ])) [] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 ::\n((fun xs ->\n    fun ys -> ((match xs with | [] -> ys | x::zs -> x :: (app zs ys))\n      [@env0 ])) [] [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 ::\n((fun xs ->\n    fun ys ->\n      match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ])) []\n   [4; 5; 6; 7])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 ::\n((match xs with | [] -> ys | x::zs -> ((x :: (app zs ys))[@env0 ]))[@env1 ])",
      "envs": {
        "env0": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env1": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          },
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 ::\n(match ((xs)[@env3 ]) with\n | [] -> ((ys)[@env0 ])\n | x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env3": {
          "xs": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "1 :: 2 :: 3 ::\n(match [] with\n | [] -> ((ys)[@env0 ])\n | x::zs -> ((x :: (app zs ys))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        },
        "env1": {
          "app": {
            "corec": [ "app" ],
            "expr": {
              "expr":
                "fun xs -> fun ys -> match xs with | [] -> ys | x::zs -> x :: (app zs ys)",
              "envs": {}
            }
          }
        },
        "env2": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "1 :: 2 :: 3 :: ((ys)[@env0 ])",
      "envs": {
        "env0": {
          "ys": {
            "corec": [],
            "expr": { "expr": "[4; 5; 6; 7]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": { "expr": "[1; 2; 3; 4; 5; 6; 7]", "envs": {} },
    "step": []
  }
]