[
  {
    "current_expression": {
      "expr": "((find_max [5; 6; 7; 8; 9; 10; 0; 1; 2; 3])[@env0 ])",
      "envs": {
        "env0": {
          "find_max": {
            "corec": [],
            "expr": {
              "expr":
                "fun xs ->\n  ((match xs with\n    | [] -> raise (Invalid_argument \"find_max\")\n    | x::xs -> List.fold_right max xs x)\n  [@env1 ])",
              "envs": {
                "env1": {
                  "List.fold_right": {
                    "corec": [ "List.fold_right" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
                      "envs": {}
                    }
                  },
                  "max": {
                    "corec": [],
                    "expr": {
                      "expr": "fun x -> fun y -> if x >= y then x else y",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((find_max)[@env0 ]) [5; 6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "find_max": {
            "corec": [],
            "expr": {
              "expr":
                "fun xs ->\n  ((match xs with\n    | [] -> raise (Invalid_argument \"find_max\")\n    | x::xs -> List.fold_right max xs x)\n  [@env1 ])",
              "envs": {
                "env1": {
                  "List.fold_right": {
                    "corec": [ "List.fold_right" ],
                    "expr": {
                      "expr":
                        "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
                      "envs": {}
                    }
                  },
                  "max": {
                    "corec": [],
                    "expr": {
                      "expr": "fun x -> fun y -> if x >= y then x else y",
                      "envs": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs ->\n   ((match xs with\n     | [] -> raise (Invalid_argument \"find_max\")\n     | x::xs -> List.fold_right max xs x)\n   [@env0 ])) [5; 6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun xs ->\n   match xs with\n   | [] -> raise (Invalid_argument \"find_max\")\n   | x::xs -> ((List.fold_right max xs x)[@env0 ]))\n  [5; 6; 7; 8; 9; 10; 0; 1; 2; 3]",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match xs with\n  | [] -> raise (Invalid_argument \"find_max\")\n  | x::xs -> ((List.fold_right max xs x)[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[5; 6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((xs)[@env1 ]) with\n| [] -> raise (Invalid_argument \"find_max\")\n| x::xs -> ((List.fold_right max xs x)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[5; 6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [5; 6; 7; 8; 9; 10; 0; 1; 2; 3] with\n| [] -> raise (Invalid_argument \"find_max\")\n| x::xs -> ((List.fold_right max xs x)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_right max xs x)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((List.fold_right max xs x)[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_right)[@env3 ]) ((max)[@env0 ]) ((xs)[@env1 ]) ((x)[@env2 ])",
      "envs": {
        "env0": {
          "max": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_right)[@env2 ]) (fun x -> fun y -> if x >= y then x else y) ((xs)\n  [@env0 ]) ((x)[@env1 ])",
      "envs": {
        "env0": {
          "xs": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_right)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n  [6; 7; 8; 9; 10; 0; 1; 2; 3] ((x)[@env0 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((List.fold_right)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  [6; 7; 8; 9; 10; 0; 1; 2; 3] 5",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun f ->\n    fun l ->\n      fun accu ->\n        match l with | [] -> accu | a::l -> f a (List.fold_right f l accu))\n  [@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n  [6; 7; 8; 9; 10; 0; 1; 2; 3] 5",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   ((fun l ->\n       fun accu ->\n         match l with | [] -> accu | a::l -> f a (List.fold_right f l accu))\n   [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n  [6; 7; 8; 9; 10; 0; 1; 2; 3] 5",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     ((fun accu ->\n         match l with | [] -> accu | a::l -> f a (List.fold_right f l accu))\n     [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n  [6; 7; 8; 9; 10; 0; 1; 2; 3] 5",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun accu ->\n       ((match l with | [] -> accu | a::l -> f a (List.fold_right f l accu))\n       [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n  [6; 7; 8; 9; 10; 0; 1; 2; 3] 5",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun f ->\n   fun l ->\n     fun accu ->\n       match l with\n       | [] -> accu\n       | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n  (fun x -> fun y -> if x >= y then x else y) [6; 7; 8; 9; 10; 0; 1; 2; 3] 5",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match l with\n  | [] -> accu\n  | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((l)[@env3 ]) with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[6; 7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [6; 7; 8; 9; 10; 0; 1; 2; 3] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((f a (List.fold_right f l accu))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((f a (List.fold_right f l accu))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((f a (List.fold_right f l accu))[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)[@env1 ])",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((f)[@env5 ]) ((a)[@env0 ])\n  (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)[@env3 ]))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) ((a)[@env0 ])\n  (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)[@env3 ]))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)[@env1 ]) ((accu)[@env2 ]))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (((List.fold_right)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n     ((l)[@env0 ]) ((accu)[@env1 ]))",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (((List.fold_right)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n     [7; 8; 9; 10; 0; 1; 2; 3] ((accu)[@env0 ]))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (((List.fold_right)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n     [7; 8; 9; 10; 0; 1; 2; 3] 5)",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (((fun f ->\n       fun l ->\n         fun accu ->\n           match l with | [] -> accu | a::l -> f a (List.fold_right f l accu))\n     [@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n     [7; 8; 9; 10; 0; 1; 2; 3] 5)",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun f ->\n      ((fun l ->\n          fun accu ->\n            match l with\n            | [] -> accu\n            | a::l -> f a (List.fold_right f l accu))\n      [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n     [7; 8; 9; 10; 0; 1; 2; 3] 5)",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun f ->\n      fun l ->\n        ((fun accu ->\n            match l with\n            | [] -> accu\n            | a::l -> f a (List.fold_right f l accu))\n        [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n     [7; 8; 9; 10; 0; 1; 2; 3] 5)",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun f ->\n      fun l ->\n        fun accu ->\n          ((match l with\n            | [] -> accu\n            | a::l -> f a (List.fold_right f l accu))\n          [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n     [7; 8; 9; 10; 0; 1; 2; 3] 5)",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun f ->\n      fun l ->\n        fun accu ->\n          match l with\n          | [] -> accu\n          | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n     (fun x -> fun y -> if x >= y then x else y) [7; 8; 9; 10; 0; 1; 2; 3] 5)",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((match l with\n    | [] -> accu\n    | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))[@env1 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (match ((l)[@env3 ]) with\n   | [] -> ((accu)[@env0 ])\n   | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[7; 8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (match [7; 8; 9; 10; 0; 1; 2; 3] with\n   | [] -> ((accu)[@env0 ])\n   | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ]))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((f a (List.fold_right f l accu))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((f a (List.fold_right f l accu))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((f a (List.fold_right f l accu))[@env0 ])",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)[@env1 ]))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (((f)[@env5 ]) ((a)[@env0 ])\n     (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)\n        [@env3 ])))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) ((a)[@env0 ])\n     (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)\n        [@env3 ])))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)[@env1 ]) ((accu)\n        [@env2 ])))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (((List.fold_right)[@env2 ]) (fun x -> fun y -> if x >= y then x else y)\n        ((l)[@env0 ]) ((accu)[@env1 ])))",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (((List.fold_right)[@env1 ]) (fun x -> fun y -> if x >= y then x else y)\n        [8; 9; 10; 0; 1; 2; 3] ((accu)[@env0 ])))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (((List.fold_right)[@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n        [8; 9; 10; 0; 1; 2; 3] 5))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (((fun f ->\n          fun l ->\n            fun accu ->\n              match l with\n              | [] -> accu\n              | a::l -> f a (List.fold_right f l accu))[@env0 ])\n        (fun x -> fun y -> if x >= y then x else y) [8; 9; 10; 0; 1; 2; 3] 5))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun f ->\n         ((fun l ->\n             fun accu ->\n               match l with\n               | [] -> accu\n               | a::l -> f a (List.fold_right f l accu))\n         [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n        [8; 9; 10; 0; 1; 2; 3] 5))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun f ->\n         fun l ->\n           ((fun accu ->\n               match l with\n               | [] -> accu\n               | a::l -> f a (List.fold_right f l accu))\n           [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n        [8; 9; 10; 0; 1; 2; 3] 5))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun f ->\n         fun l ->\n           fun accu ->\n             ((match l with\n               | [] -> accu\n               | a::l -> f a (List.fold_right f l accu))\n             [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n        [8; 9; 10; 0; 1; 2; 3] 5))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun f ->\n         fun l ->\n           fun accu ->\n             match l with\n             | [] -> accu\n             | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n        (fun x -> fun y -> if x >= y then x else y) [8; 9; 10; 0; 1; 2; 3] 5))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((match l with\n       | [] -> accu\n       | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))[@env1 ]))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (match ((l)[@env3 ]) with\n      | [] -> ((accu)[@env0 ])\n      | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ])))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[8; 9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (match [8; 9; 10; 0; 1; 2; 3] with\n      | [] -> ((accu)[@env0 ])\n      | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ])))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((f a (List.fold_right f l accu))[@env2 ][@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((f a (List.fold_right f l accu))[@env1 ][@env0 ]))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((f a (List.fold_right f l accu))[@env0 ]))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)[@env1 ])))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (((f)[@env5 ]) ((a)[@env0 ])\n        (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)\n           [@env3 ]))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) ((a)[@env0 ])\n        (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)\n           [@env3 ]))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)[@env1 ]) ((accu)\n           [@env2 ]))))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (((List.fold_right)[@env2 ])\n           (fun x -> fun y -> if x >= y then x else y) ((l)[@env0 ]) ((accu)\n           [@env1 ]))))",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (((List.fold_right)[@env1 ])\n           (fun x -> fun y -> if x >= y then x else y) [9; 10; 0; 1; 2; 3]\n           ((accu)[@env0 ]))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (((List.fold_right)[@env0 ])\n           (fun x -> fun y -> if x >= y then x else y) [9; 10; 0; 1; 2; 3] 5)))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (((fun f ->\n             fun l ->\n               fun accu ->\n                 match l with\n                 | [] -> accu\n                 | a::l -> f a (List.fold_right f l accu))[@env0 ])\n           (fun x -> fun y -> if x >= y then x else y) [9; 10; 0; 1; 2; 3] 5)))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun f ->\n            ((fun l ->\n                fun accu ->\n                  match l with\n                  | [] -> accu\n                  | a::l -> f a (List.fold_right f l accu))\n            [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n           [9; 10; 0; 1; 2; 3] 5)))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun f ->\n            fun l ->\n              ((fun accu ->\n                  match l with\n                  | [] -> accu\n                  | a::l -> f a (List.fold_right f l accu))\n              [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n           [9; 10; 0; 1; 2; 3] 5)))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun f ->\n            fun l ->\n              fun accu ->\n                ((match l with\n                  | [] -> accu\n                  | a::l -> f a (List.fold_right f l accu))\n                [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n           [9; 10; 0; 1; 2; 3] 5)))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun f ->\n            fun l ->\n              fun accu ->\n                match l with\n                | [] -> accu\n                | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n           (fun x -> fun y -> if x >= y then x else y) [9; 10; 0; 1; 2; 3] 5)))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((match l with\n          | [] -> accu\n          | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))[@env1 ])))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (match ((l)[@env3 ]) with\n         | [] -> ((accu)[@env0 ])\n         | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ]))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[9; 10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (match [9; 10; 0; 1; 2; 3] with\n         | [] -> ((accu)[@env0 ])\n         | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ]))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((f a (List.fold_right f l accu))[@env2 ][@env1 ][@env0 ])))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((f a (List.fold_right f l accu))[@env1 ][@env0 ])))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((f a (List.fold_right f l accu))[@env0 ])))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)[@env1 ]))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (((f)[@env5 ]) ((a)[@env0 ])\n           (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)\n              [@env3 ])))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) ((a)[@env0 ])\n           (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ]) ((accu)\n              [@env3 ])))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)[@env1 ]) ((accu)\n              [@env2 ])))))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (((List.fold_right)[@env2 ])\n              (fun x -> fun y -> if x >= y then x else y) ((l)[@env0 ])\n              ((accu)[@env1 ])))))",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (((List.fold_right)[@env1 ])\n              (fun x -> fun y -> if x >= y then x else y) [10; 0; 1; 2; 3]\n              ((accu)[@env0 ])))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (((List.fold_right)[@env0 ])\n              (fun x -> fun y -> if x >= y then x else y) [10; 0; 1; 2; 3] 5))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (((fun f ->\n                fun l ->\n                  fun accu ->\n                    match l with\n                    | [] -> accu\n                    | a::l -> f a (List.fold_right f l accu))[@env0 ])\n              (fun x -> fun y -> if x >= y then x else y) [10; 0; 1; 2; 3] 5))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun f ->\n               ((fun l ->\n                   fun accu ->\n                     match l with\n                     | [] -> accu\n                     | a::l -> f a (List.fold_right f l accu))\n               [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n              [10; 0; 1; 2; 3] 5))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun f ->\n               fun l ->\n                 ((fun accu ->\n                     match l with\n                     | [] -> accu\n                     | a::l -> f a (List.fold_right f l accu))\n                 [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n              [10; 0; 1; 2; 3] 5))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun f ->\n               fun l ->\n                 fun accu ->\n                   ((match l with\n                     | [] -> accu\n                     | a::l -> f a (List.fold_right f l accu))\n                   [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n              [10; 0; 1; 2; 3] 5))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun f ->\n               fun l ->\n                 fun accu ->\n                   match l with\n                   | [] -> accu\n                   | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n              (fun x -> fun y -> if x >= y then x else y) [10; 0; 1; 2; 3] 5))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((match l with\n             | [] -> accu\n             | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))[@env1 ]))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (match ((l)[@env3 ]) with\n            | [] -> ((accu)[@env0 ])\n            | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ])))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[10; 0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (match [10; 0; 1; 2; 3] with\n            | [] -> ((accu)[@env0 ])\n            | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ])))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((f a (List.fold_right f l accu))[@env2 ][@env1 ][@env0 ]))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((f a (List.fold_right f l accu))[@env1 ][@env0 ]))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((f a (List.fold_right f l accu))[@env0 ]))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)[@env1 ])))))",
      "envs": {
        "env0": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (((f)[@env5 ]) ((a)[@env0 ])\n              (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ])\n                 ((accu)[@env3 ]))))))",
      "envs": {
        "env0": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) ((a)[@env0 ])\n              (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ])\n                 ((accu)[@env3 ]))))))",
      "envs": {
        "env0": {
          "a": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)[@env1 ])\n                 ((accu)[@env2 ]))))))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (((List.fold_right)[@env2 ])\n                 (fun x -> fun y -> if x >= y then x else y) ((l)[@env0 ])\n                 ((accu)[@env1 ]))))))",
      "envs": {
        "env0": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (((List.fold_right)[@env1 ])\n                 (fun x -> fun y -> if x >= y then x else y) [0; 1; 2; 3]\n                 ((accu)[@env0 ]))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (((List.fold_right)[@env0 ])\n                 (fun x -> fun y -> if x >= y then x else y) [0; 1; 2; 3] 5)))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (((fun f ->\n                   fun l ->\n                     fun accu ->\n                       match l with\n                       | [] -> accu\n                       | a::l -> f a (List.fold_right f l accu))[@env0 ])\n                 (fun x -> fun y -> if x >= y then x else y) [0; 1; 2; 3] 5)))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun f ->\n                  ((fun l ->\n                      fun accu ->\n                        match l with\n                        | [] -> accu\n                        | a::l -> f a (List.fold_right f l accu))\n                  [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n                 [0; 1; 2; 3] 5)))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun f ->\n                  fun l ->\n                    ((fun accu ->\n                        match l with\n                        | [] -> accu\n                        | a::l -> f a (List.fold_right f l accu))\n                    [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n                 [0; 1; 2; 3] 5)))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun f ->\n                  fun l ->\n                    fun accu ->\n                      ((match l with\n                        | [] -> accu\n                        | a::l -> f a (List.fold_right f l accu))\n                      [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n                 [0; 1; 2; 3] 5)))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun f ->\n                  fun l ->\n                    fun accu ->\n                      match l with\n                      | [] -> accu\n                      | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n                 (fun x -> fun y -> if x >= y then x else y) [0; 1; 2; 3] 5)))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((match l with\n                | [] -> accu\n                | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n              [@env1 ])))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (match ((l)[@env3 ]) with\n               | [] -> ((accu)[@env0 ])\n               | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ]))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": {
            "corec": [],
            "expr": { "expr": "[0; 1; 2; 3]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (match [0; 1; 2; 3] with\n               | [] -> ((accu)[@env0 ])\n               | a::l -> ((f a (List.fold_right f l accu))[@env2 ][@env1 ]))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((f a (List.fold_right f l accu))[@env2 ][@env1 ][@env0 ])))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((f a (List.fold_right f l accu))[@env1 ][@env0 ])))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((f a (List.fold_right f l accu))[@env0 ])))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)\n                 [@env1 ]))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (((f)[@env5 ]) ((a)[@env0 ])\n                 (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ])\n                    ((accu)[@env3 ])))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) ((a)[@env0 ])\n                 (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ])\n                    ((accu)[@env3 ])))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)[@env1 ])\n                    ((accu)[@env2 ])))))))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (((List.fold_right)[@env2 ])\n                    (fun x -> fun y -> if x >= y then x else y) ((l)[@env0 ])\n                    ((accu)[@env1 ])))))))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (((List.fold_right)[@env1 ])\n                    (fun x -> fun y -> if x >= y then x else y) [1; 2; 3]\n                    ((accu)[@env0 ])))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (((List.fold_right)[@env0 ])\n                    (fun x -> fun y -> if x >= y then x else y) [1; 2; 3] 5))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (((fun f ->\n                      fun l ->\n                        fun accu ->\n                          match l with\n                          | [] -> accu\n                          | a::l -> f a (List.fold_right f l accu))[@env0 ])\n                    (fun x -> fun y -> if x >= y then x else y) [1; 2; 3] 5))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun f ->\n                     ((fun l ->\n                         fun accu ->\n                           match l with\n                           | [] -> accu\n                           | a::l -> f a (List.fold_right f l accu))\n                     [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n                    [1; 2; 3] 5))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun f ->\n                     fun l ->\n                       ((fun accu ->\n                           match l with\n                           | [] -> accu\n                           | a::l -> f a (List.fold_right f l accu))\n                       [@env0 ])) (fun x -> fun y -> if x >= y then x else y)\n                    [1; 2; 3] 5))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun f ->\n                     fun l ->\n                       fun accu ->\n                         ((match l with\n                           | [] -> accu\n                           | a::l -> f a (List.fold_right f l accu))\n                         [@env0 ]))\n                    (fun x -> fun y -> if x >= y then x else y) [1; 2; 3] 5))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun f ->\n                     fun l ->\n                       fun accu ->\n                         match l with\n                         | [] -> accu\n                         | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n                    (fun x -> fun y -> if x >= y then x else y) [1; 2; 3] 5))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((match l with\n                   | [] -> accu\n                   | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n                 [@env1 ]))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (match ((l)[@env3 ]) with\n                  | [] -> ((accu)[@env0 ])\n                  | a::l -> ((f a (List.fold_right f l accu))\n                      [@env2 ][@env1 ])))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (match [1; 2; 3] with\n                  | [] -> ((accu)[@env0 ])\n                  | a::l -> ((f a (List.fold_right f l accu))\n                      [@env2 ][@env1 ])))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((f a (List.fold_right f l accu))[@env2 ][@env1 ][@env0 ]))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((f a (List.fold_right f l accu))[@env1 ][@env0 ]))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((f a (List.fold_right f l accu))[@env0 ]))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)\n                    [@env1 ])))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (((f)[@env5 ]) ((a)[@env0 ])\n                    (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ])\n                       ((accu)[@env3 ]))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) ((a)[@env0 ])\n                    (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)[@env2 ])\n                       ((accu)[@env3 ]))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)[@env1 ])\n                       ((accu)[@env2 ]))))))))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (((List.fold_right)[@env2 ])\n                       (fun x -> fun y -> if x >= y then x else y) ((l)\n                       [@env0 ]) ((accu)[@env1 ]))))))))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (((List.fold_right)[@env1 ])\n                       (fun x -> fun y -> if x >= y then x else y) [2; 3]\n                       ((accu)[@env0 ]))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (((List.fold_right)[@env0 ])\n                       (fun x -> fun y -> if x >= y then x else y) [2; 3] 5)))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (((fun f ->\n                         fun l ->\n                           fun accu ->\n                             match l with\n                             | [] -> accu\n                             | a::l -> f a (List.fold_right f l accu))\n                       [@env0 ]) (fun x -> fun y -> if x >= y then x else y)\n                       [2; 3] 5)))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun f ->\n                        ((fun l ->\n                            fun accu ->\n                              match l with\n                              | [] -> accu\n                              | a::l -> f a (List.fold_right f l accu))\n                        [@env0 ]))\n                       (fun x -> fun y -> if x >= y then x else y) [2; 3] 5)))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun f ->\n                        fun l ->\n                          ((fun accu ->\n                              match l with\n                              | [] -> accu\n                              | a::l -> f a (List.fold_right f l accu))\n                          [@env0 ]))\n                       (fun x -> fun y -> if x >= y then x else y) [2; 3] 5)))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun f ->\n                        fun l ->\n                          fun accu ->\n                            ((match l with\n                              | [] -> accu\n                              | a::l -> f a (List.fold_right f l accu))\n                            [@env0 ]))\n                       (fun x -> fun y -> if x >= y then x else y) [2; 3] 5)))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun f ->\n                        fun l ->\n                          fun accu ->\n                            match l with\n                            | [] -> accu\n                            | a::l -> ((f a (List.fold_right f l accu))\n                                [@env0 ]))\n                       (fun x -> fun y -> if x >= y then x else y) [2; 3] 5)))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((match l with\n                      | [] -> accu\n                      | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n                    [@env1 ])))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (match ((l)[@env3 ]) with\n                     | [] -> ((accu)[@env0 ])\n                     | a::l -> ((f a (List.fold_right f l accu))\n                         [@env2 ][@env1 ]))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[2; 3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (match [2; 3] with\n                     | [] -> ((accu)[@env0 ])\n                     | a::l -> ((f a (List.fold_right f l accu))\n                         [@env2 ][@env1 ]))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((f a (List.fold_right f l accu))\n                    [@env2 ][@env1 ][@env0 ])))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((f a (List.fold_right f l accu))[@env1 ][@env0 ])))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((f a (List.fold_right f l accu))[@env0 ])))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (((f)[@env2 ]) ((a)[@env0 ]) ((List.fold_right f l accu)\n                       [@env1 ]))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (((f)[@env5 ]) ((a)[@env0 ])\n                       (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)\n                          [@env2 ]) ((accu)[@env3 ])))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) ((a)\n                       [@env0 ])\n                       (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)\n                          [@env2 ]) ((accu)[@env3 ])))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)\n                          [@env1 ]) ((accu)[@env2 ])))))))))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (((List.fold_right)[@env2 ])\n                          (fun x -> fun y -> if x >= y then x else y) ((l)\n                          [@env0 ]) ((accu)[@env1 ])))))))))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (((List.fold_right)[@env1 ])\n                          (fun x -> fun y -> if x >= y then x else y) \n                          [3] ((accu)[@env0 ])))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (((List.fold_right)[@env0 ])\n                          (fun x -> fun y -> if x >= y then x else y) \n                          [3] 5))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (((fun f ->\n                            fun l ->\n                              fun accu ->\n                                match l with\n                                | [] -> accu\n                                | a::l -> f a (List.fold_right f l accu))\n                          [@env0 ])\n                          (fun x -> fun y -> if x >= y then x else y) \n                          [3] 5))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun f ->\n                           ((fun l ->\n                               fun accu ->\n                                 match l with\n                                 | [] -> accu\n                                 | a::l -> f a (List.fold_right f l accu))\n                           [@env0 ]))\n                          (fun x -> fun y -> if x >= y then x else y) \n                          [3] 5))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun f ->\n                           fun l ->\n                             ((fun accu ->\n                                 match l with\n                                 | [] -> accu\n                                 | a::l -> f a (List.fold_right f l accu))\n                             [@env0 ]))\n                          (fun x -> fun y -> if x >= y then x else y) \n                          [3] 5))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun f ->\n                           fun l ->\n                             fun accu ->\n                               ((match l with\n                                 | [] -> accu\n                                 | a::l -> f a (List.fold_right f l accu))\n                               [@env0 ]))\n                          (fun x -> fun y -> if x >= y then x else y) \n                          [3] 5))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun f ->\n                           fun l ->\n                             fun accu ->\n                               match l with\n                               | [] -> accu\n                               | a::l -> ((f a (List.fold_right f l accu))\n                                   [@env0 ]))\n                          (fun x -> fun y -> if x >= y then x else y) \n                          [3] 5))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((match l with\n                         | [] -> accu\n                         | a::l -> ((f a (List.fold_right f l accu))[@env0 ]))\n                       [@env1 ]))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (match ((l)[@env3 ]) with\n                        | [] -> ((accu)[@env0 ])\n                        | a::l -> ((f a (List.fold_right f l accu))\n                            [@env2 ][@env1 ])))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[3]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (match [3] with\n                        | [] -> ((accu)[@env0 ])\n                        | a::l -> ((f a (List.fold_right f l accu))\n                            [@env2 ][@env1 ])))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((f a (List.fold_right f l accu))\n                       [@env2 ][@env1 ][@env0 ]))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((f a (List.fold_right f l accu))[@env1 ][@env0 ]))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((f a (List.fold_right f l accu))[@env0 ]))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "a": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (((f)[@env2 ]) ((a)[@env0 ])\n                          ((List.fold_right f l accu)[@env1 ])))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          },
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (((f)[@env5 ]) ((a)[@env0 ])\n                          (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)\n                             [@env2 ]) ((accu)[@env3 ]))))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env5": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) ((a)\n                          [@env0 ])\n                          (((List.fold_right)[@env4 ]) ((f)[@env1 ]) ((l)\n                             [@env2 ]) ((accu)[@env3 ]))))))))))",
      "envs": {
        "env0": { "a": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env2": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env4": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          (((List.fold_right)[@env3 ]) ((f)[@env0 ]) ((l)\n                             [@env1 ]) ((accu)[@env2 ]))))))))))",
      "envs": {
        "env0": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          (((List.fold_right)[@env2 ])\n                             (fun x -> fun y -> if x >= y then x else y) ((l)\n                             [@env0 ]) ((accu)[@env1 ]))))))))))",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env2": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          (((List.fold_right)[@env1 ])\n                             (fun x -> fun y -> if x >= y then x else y) []\n                             ((accu)[@env0 ]))))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          (((List.fold_right)[@env0 ])\n                             (fun x -> fun y -> if x >= y then x else y) [] 5)))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          (((fun f ->\n                               fun l ->\n                                 fun accu ->\n                                   match l with\n                                   | [] -> accu\n                                   | a::l -> f a (List.fold_right f l accu))\n                             [@env0 ])\n                             (fun x -> fun y -> if x >= y then x else y) [] 5)))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          ((fun f ->\n                              ((fun l ->\n                                  fun accu ->\n                                    match l with\n                                    | [] -> accu\n                                    | a::l -> f a (List.fold_right f l accu))\n                              [@env0 ]))\n                             (fun x -> fun y -> if x >= y then x else y) [] 5)))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          ((fun f ->\n                              fun l ->\n                                ((fun accu ->\n                                    match l with\n                                    | [] -> accu\n                                    | a::l -> f a (List.fold_right f l accu))\n                                [@env0 ]))\n                             (fun x -> fun y -> if x >= y then x else y) [] 5)))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          ((fun f ->\n                              fun l ->\n                                fun accu ->\n                                  ((match l with\n                                    | [] -> accu\n                                    | a::l -> f a (List.fold_right f l accu))\n                                  [@env0 ]))\n                             (fun x -> fun y -> if x >= y then x else y) [] 5)))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          ((fun f ->\n                              fun l ->\n                                fun accu ->\n                                  match l with\n                                  | [] -> accu\n                                  | a::l -> ((f a (List.fold_right f l accu))\n                                      [@env0 ]))\n                             (fun x -> fun y -> if x >= y then x else y) [] 5)))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          ((match l with\n                            | [] -> accu\n                            | a::l -> ((f a (List.fold_right f l accu))\n                                [@env0 ]))[@env1 ])))))))))",
      "envs": {
        "env0": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env1": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          (match ((l)[@env3 ]) with\n                           | [] -> ((accu)[@env0 ])\n                           | a::l -> ((f a (List.fold_right f l accu))\n                               [@env2 ][@env1 ]))))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env3": {
          "l": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3\n                          (match [] with\n                           | [] -> ((accu)[@env0 ])\n                           | a::l -> ((f a (List.fold_right f l accu))\n                               [@env2 ][@env1 ]))))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        },
        "env1": {
          "List.fold_right": {
            "corec": [ "List.fold_right" ],
            "expr": {
              "expr":
                "fun f ->\n  fun l ->\n    fun accu ->\n      match l with | [] -> accu | a::l -> f a (List.fold_right f l accu)",
              "envs": {}
            }
          }
        },
        "env2": {
          "f": {
            "corec": [],
            "expr": {
              "expr": "fun x -> fun y -> if x >= y then x else y",
              "envs": {}
            }
          },
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3 ((accu)\n                          [@env0 ])))))))))",
      "envs": {
        "env0": {
          "accu": { "corec": [], "expr": { "expr": "5", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((fun x -> fun y -> if x >= y then x else y) 3 5))))))))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       ((if x >= y then x else y)[@env0 ]))))))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (if ((x >= y)[@env2 ])\n                        then ((x)[@env1 ])\n                        else ((y)[@env0 ])))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (if ((x)[@env2 ]) >= ((y)[@env3 ])\n                        then ((x)[@env1 ])\n                        else ((y)[@env0 ])))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (if 3 >= ((y)[@env2 ])\n                        then ((x)[@env1 ])\n                        else ((y)[@env0 ])))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (if 3 >= 5 then ((x)[@env1 ]) else ((y)[@env0 ])))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2\n                       (if false then ((x)[@env1 ]) else ((y)[@env0 ])))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2 ((y)\n                       [@env0 ]))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((fun x -> fun y -> if x >= y then x else y) 2 5)))))))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    ((if x >= y then x else y)[@env0 ])))))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (if ((x >= y)[@env2 ])\n                     then ((x)[@env1 ])\n                     else ((y)[@env0 ]))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (if ((x)[@env2 ]) >= ((y)[@env3 ])\n                     then ((x)[@env1 ])\n                     else ((y)[@env0 ]))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (if 2 >= ((y)[@env2 ])\n                     then ((x)[@env1 ])\n                     else ((y)[@env0 ]))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (if 2 >= 5 then ((x)[@env1 ]) else ((y)[@env0 ]))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1\n                    (if false then ((x)[@env1 ]) else ((y)[@env0 ]))))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1 ((y)[@env0 ])))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((fun x -> fun y -> if x >= y then x else y) 1 5))))))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 ((if x >= y then x else y)[@env0 ]))))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (if ((x)[@env2 ]) >= ((y)[@env3 ])\n                  then ((x)[@env1 ])\n                  else ((y)[@env0 ])))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (if 1 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (if 1 >= 5 then ((x)[@env1 ]) else ((y)[@env0 ])))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0\n                 (if false then ((x)[@env1 ]) else ((y)[@env0 ])))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0 ((y)[@env0 ]))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((fun x -> fun y -> if x >= y then x else y) 0 5)))))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              ((if x >= y then x else y)[@env0 ])))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "0", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (if ((x)[@env2 ]) >= ((y)[@env3 ])\n               then ((x)[@env1 ])\n               else ((y)[@env0 ]))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (if 0 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (if 0 >= 5 then ((x)[@env1 ]) else ((y)[@env0 ]))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "0", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10\n              (if false then ((x)[@env1 ]) else ((y)[@env0 ]))))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": { "x": { "corec": [], "expr": { "expr": "0", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10 ((y)[@env0 ])))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((fun x -> fun y -> if x >= y then x else y) 10 5))))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           ((if x >= y then x else y)[@env0 ]))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (if ((x)[@env2 ]) >= ((y)[@env3 ])\n            then ((x)[@env1 ])\n            else ((y)[@env0 ])))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env3": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (if 10 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env2": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (if 10 >= 5 then ((x)[@env1 ]) else ((y)[@env0 ])))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9\n           (if true then ((x)[@env1 ]) else ((y)[@env0 ])))))",
      "envs": {
        "env0": { "y": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9 ((x)[@env0 ]))))",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((fun x -> fun y -> if x >= y then x else y) 9 10)))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        ((if x >= y then x else y)[@env0 ])))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "9", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (if ((x)[@env2 ]) >= ((y)[@env3 ])\n         then ((x)[@env1 ])\n         else ((y)[@env0 ]))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env3": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (if 9 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (if 9 >= 10 then ((x)[@env1 ]) else ((y)[@env0 ]))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8\n        (if false then ((x)[@env1 ]) else ((y)[@env0 ]))))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "9", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8 ((y)[@env0 ])))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     ((fun x -> fun y -> if x >= y then x else y) 8 10))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7 ((if x >= y then x else y)\n     [@env0 ]))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "8", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ])))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env3": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (if 8 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (if 8 >= 10 then ((x)[@env1 ]) else ((y)[@env0 ])))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7\n     (if false then ((x)[@env1 ]) else ((y)[@env0 ])))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "8", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7 ((y)[@env0 ]))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  ((fun x -> fun y -> if x >= y then x else y) 7 10)",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6 ((if x >= y then x else y)\n  [@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "7", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env3": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (if 7 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ]))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (if 7 >= 10 then ((x)[@env1 ]) else ((y)[@env0 ]))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun x -> fun y -> if x >= y then x else y) 6\n  (if false then ((x)[@env1 ]) else ((y)[@env0 ]))",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "7", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "(fun x -> fun y -> if x >= y then x else y) 6 ((y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "(fun x -> fun y -> if x >= y then x else y) 6 10",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr": "((if x >= y then x else y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "if ((x >= y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } },
          "x": { "corec": [], "expr": { "expr": "6", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x)[@env2 ]) >= ((y)[@env3 ]) then ((x)[@env1 ]) else ((y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "if 6 >= ((y)[@env2 ]) then ((x)[@env1 ]) else ((y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "if 6 >= 10 then ((x)[@env1 ]) else ((y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "if false then ((x)[@env1 ]) else ((y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "6", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((y)[@env0 ])",
      "envs": {
        "env0": {
          "y": { "corec": [], "expr": { "expr": "10", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "10", "envs": {} }, "step": [] }
]