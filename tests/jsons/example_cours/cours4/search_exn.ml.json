[
  {
    "current_expression": {
      "expr": "((search (fun x -> (x mod 5) = 0) ex)[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "ex": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((search)[@env1 ]) (fun x -> (x mod 5) = 0) ((ex)[@env0 ])",
      "envs": {
        "env0": {
          "ex": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun p ->\n    fun bt ->\n      match bt with\n      | Empty -> raise Not_found\n      | Node (x, bt1, bt2) ->\n          if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))[@env0 ])\n  (fun x -> (x mod 5) = 0)\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   ((fun bt ->\n       match bt with\n       | Empty -> raise Not_found\n       | Node (x, bt1, bt2) ->\n           if p x\n           then x\n           else (try search p bt1 with | Not_found -> search p bt2))\n   [@env0 ])) (fun x -> (x mod 5) = 0)\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun bt ->\n     ((match bt with\n       | Empty -> raise Not_found\n       | Node (x, bt1, bt2) ->\n           if p x\n           then x\n           else (try search p bt1 with | Not_found -> search p bt2))\n     [@env0 ])) (fun x -> (x mod 5) = 0)\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun bt ->\n     match bt with\n     | Empty -> raise Not_found\n     | Node (x, bt1, bt2) ->\n         ((if p x\n           then x\n           else (try search p bt1 with | Not_found -> search p bt2))\n         [@env0 ])) (fun x -> (x mod 5) = 0)\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env2 ]) with\n| Empty -> raise Not_found\n| Node (x, bt1, bt2) ->\n    ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n    [@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node\n        (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n          (Node (5, (Node (6, Empty, Empty)), Empty)))\nwith\n| Empty -> raise Not_found\n| Node (x, bt1, bt2) ->\n    ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n    [@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n[@env0 ])",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 1\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (1 mod 5) = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if 1 = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if false\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((try search p bt1 with | Not_found -> search p bt2)[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((search p bt1)[@env1 ]) with | Not_found -> ((search p bt2)[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((search)[@env3 ]) ((p)[@env1 ]) ((bt1)[@env2 ])\nwith | Not_found -> ((search p bt2)[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((search)[@env5 ]) ((p)[@env3 ]) ((bt1)[@env4 ])\nwith | Not_found -> ((search)[@env2 ]) ((p)[@env0 ]) ((bt2)[@env1 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env4": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env5": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((search)[@env4 ]) (fun x -> (x mod 5) = 0) ((bt1)[@env3 ])\nwith | Not_found -> ((search)[@env2 ]) ((p)[@env0 ]) ((bt2)[@env1 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((search)[@env3 ]) (fun x -> (x mod 5) = 0)\n    (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\nwith | Not_found -> ((search)[@env2 ]) ((p)[@env0 ]) ((bt2)[@env1 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((search)[@env2 ]) (fun x -> (x mod 5) = 0)\n    (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\nwith\n| Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) ((bt2)[@env0 ])",
      "envs": {
        "env0": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((search)[@env1 ]) (fun x -> (x mod 5) = 0)\n    (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((fun p ->\n      fun bt ->\n        match bt with\n        | Empty -> raise Not_found\n        | Node (x, bt1, bt2) ->\n            if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n    [@env1 ]) (fun x -> (x mod 5) = 0)\n    (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     ((fun bt ->\n         match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n     [@env1 ])) (fun x -> (x mod 5) = 0)\n    (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     fun bt ->\n       ((match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n       [@env1 ])) (fun x -> (x mod 5) = 0)\n    (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     fun bt ->\n       match bt with\n       | Empty -> raise Not_found\n       | Node (x, bt1, bt2) ->\n           ((if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n           [@env1 ])) (fun x -> (x mod 5) = 0)\n    (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env1 ]))\n  [@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  match ((bt)[@env3 ]) with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  match Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))) with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n  [@env3 ][@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n  [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n  [@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if ((p x)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if ((p)[@env4 ]) ((x)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (fun x -> (x mod 5) = 0) ((x)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (fun x -> (x mod 5) = 0) 2\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (((x mod 5) = 0)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if ((x mod 5)[@env3 ]) = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (((x)[@env3 ]) mod 5) = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (2 mod 5) = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if 2 = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if false\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((try search p bt1 with | Not_found -> search p bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try try ((search p bt1)[@env2 ]) with | Not_found -> ((search p bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env4 ]) ((p)[@env2 ]) ((bt1)[@env3 ])\n  with | Not_found -> ((search p bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env6 ]) ((p)[@env4 ]) ((bt1)[@env5 ])\n  with | Not_found -> ((search)[@env3 ]) ((p)[@env1 ]) ((bt2)[@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env5": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env6": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env5 ]) (fun x -> (x mod 5) = 0) ((bt1)[@env4 ])\n  with | Not_found -> ((search)[@env3 ]) ((p)[@env1 ]) ((bt2)[@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env5": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env4 ]) (fun x -> (x mod 5) = 0) (Node (3, Empty, Empty))\n  with | Not_found -> ((search)[@env3 ]) ((p)[@env1 ]) ((bt2)[@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env3 ]) (fun x -> (x mod 5) = 0) (Node (3, Empty, Empty))\n  with\n  | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) ((bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env2 ]) (fun x -> (x mod 5) = 0) (Node (3, Empty, Empty))\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((fun p ->\n        fun bt ->\n          match bt with\n          | Empty -> raise Not_found\n          | Node (x, bt1, bt2) ->\n              if p x\n              then x\n              else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ]) (fun x -> (x mod 5) = 0) (Node (3, Empty, Empty))\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       ((fun bt ->\n           match bt with\n           | Empty -> raise Not_found\n           | Node (x, bt1, bt2) ->\n               if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n       [@env2 ])) (fun x -> (x mod 5) = 0) (Node (3, Empty, Empty))\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       fun bt ->\n         ((match bt with\n           | Empty -> raise Not_found\n           | Node (x, bt1, bt2) ->\n               if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n         [@env2 ])) (fun x -> (x mod 5) = 0) (Node (3, Empty, Empty))\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       fun bt ->\n         match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             ((if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n             [@env2 ])) (fun x -> (x mod 5) = 0) (Node (3, Empty, Empty))\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((match bt with\n      | Empty -> raise Not_found\n      | Node (x, bt1, bt2) ->\n          ((if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n          [@env2 ]))\n    [@env3 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    match ((bt)[@env4 ]) with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env3 ][@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env4": {
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    match Node (3, Empty, Empty) with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env3 ][@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n    [@env4 ][@env3 ][@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env4": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n    [@env3 ][@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n    [@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if ((p x)[@env4 ])\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if ((p)[@env5 ]) ((x)[@env4 ])\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env5": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if (fun x -> (x mod 5) = 0) ((x)[@env4 ])\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if (fun x -> (x mod 5) = 0) 3\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if (((x mod 5) = 0)[@env4 ])\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if ((x mod 5)[@env4 ]) = 0\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if (((x)[@env4 ]) mod 5) = 0\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if (3 mod 5) = 0\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if 3 = 0\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    if false\n    then ((x)[@env3 ])\n    else (((try search p bt1 with | Not_found -> search p bt2))[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((try search p bt1 with | Not_found -> search p bt2)[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try ((search p bt1)[@env3 ]) with | Not_found -> ((search p bt2)[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try ((search)[@env5 ]) ((p)[@env3 ]) ((bt1)[@env4 ])\n    with | Not_found -> ((search p bt2)[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env4": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env5": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try ((search)[@env7 ]) ((p)[@env5 ]) ((bt1)[@env6 ])\n    with | Not_found -> ((search)[@env4 ]) ((p)[@env2 ]) ((bt2)[@env3 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env5": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env6": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env7": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try ((search)[@env6 ]) (fun x -> (x mod 5) = 0) ((bt1)[@env5 ])\n    with | Not_found -> ((search)[@env4 ]) ((p)[@env2 ]) ((bt2)[@env3 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env5": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env6": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try ((search)[@env5 ]) (fun x -> (x mod 5) = 0) Empty\n    with | Not_found -> ((search)[@env4 ]) ((p)[@env2 ]) ((bt2)[@env3 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env5": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try ((search)[@env4 ]) (fun x -> (x mod 5) = 0) Empty\n    with\n    | Not_found ->\n        ((search)[@env3 ]) (fun x -> (x mod 5) = 0) ((bt2)[@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try ((search)[@env3 ]) (fun x -> (x mod 5) = 0) Empty\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try\n      ((fun p ->\n          fun bt ->\n            match bt with\n            | Empty -> raise Not_found\n            | Node (x, bt1, bt2) ->\n                if p x\n                then x\n                else (try search p bt1 with | Not_found -> search p bt2))\n        [@env3 ]) (fun x -> (x mod 5) = 0) Empty\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try\n      (fun p ->\n         ((fun bt ->\n             match bt with\n             | Empty -> raise Not_found\n             | Node (x, bt1, bt2) ->\n                 if p x\n                 then x\n                 else (try search p bt1 with | Not_found -> search p bt2))\n         [@env3 ])) (fun x -> (x mod 5) = 0) Empty\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try\n      (fun p ->\n         fun bt ->\n           ((match bt with\n             | Empty -> raise Not_found\n             | Node (x, bt1, bt2) ->\n                 if p x\n                 then x\n                 else (try search p bt1 with | Not_found -> search p bt2))\n           [@env3 ])) (fun x -> (x mod 5) = 0) Empty\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try\n      (fun p ->\n         fun bt ->\n           match bt with\n           | Empty -> raise Not_found\n           | Node (x, bt1, bt2) ->\n               ((if p x\n                 then x\n                 else (try search p bt1 with | Not_found -> search p bt2))\n               [@env3 ])) (fun x -> (x mod 5) = 0) Empty\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try\n      ((match bt with\n        | Empty -> raise Not_found\n        | Node (x, bt1, bt2) ->\n            ((if p x\n              then x\n              else (try search p bt1 with | Not_found -> search p bt2))\n            [@env3 ]))\n      [@env4 ])\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try\n      match ((bt)[@env5 ]) with\n      | Empty -> raise Not_found\n      | Node (x, bt1, bt2) ->\n          ((if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n          [@env4 ][@env3 ])\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env5": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try\n      match Empty with\n      | Empty -> raise Not_found\n      | Node (x, bt1, bt2) ->\n          ((if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n          [@env4 ][@env3 ])\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    try raise Not_found\n    with | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Exn" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((fun p ->\n        fun bt ->\n          match bt with\n          | Empty -> raise Not_found\n          | Node (x, bt1, bt2) ->\n              if p x\n              then x\n              else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       ((fun bt ->\n           match bt with\n           | Empty -> raise Not_found\n           | Node (x, bt1, bt2) ->\n               if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n       [@env2 ])) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       fun bt ->\n         ((match bt with\n           | Empty -> raise Not_found\n           | Node (x, bt1, bt2) ->\n               if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n         [@env2 ])) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       fun bt ->\n         match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             ((if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n             [@env2 ])) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((match bt with\n      | Empty -> raise Not_found\n      | Node (x, bt1, bt2) ->\n          ((if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n          [@env2 ]))\n    [@env3 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    match ((bt)[@env4 ]) with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env3 ][@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    match Empty with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env3 ][@env2 ])\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try raise Not_found\n  with\n  | Not_found ->\n      ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Exn" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((search)[@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((fun p ->\n      fun bt ->\n        match bt with\n        | Empty -> raise Not_found\n        | Node (x, bt1, bt2) ->\n            if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n    [@env1 ]) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     ((fun bt ->\n         match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n     [@env1 ])) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     fun bt ->\n       ((match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n       [@env1 ])) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     fun bt ->\n       match bt with\n       | Empty -> raise Not_found\n       | Node (x, bt1, bt2) ->\n           ((if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n           [@env1 ])) (fun x -> (x mod 5) = 0) (Node (4, Empty, Empty))\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env1 ]))\n  [@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  match ((bt)[@env3 ]) with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  match Node (4, Empty, Empty) with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n  [@env3 ][@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n  [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n  [@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if ((p x)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if ((p)[@env4 ]) ((x)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env4": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (fun x -> (x mod 5) = 0) ((x)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (fun x -> (x mod 5) = 0) 4\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (((x mod 5) = 0)[@env3 ])\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if ((x mod 5)[@env3 ]) = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (((x)[@env3 ]) mod 5) = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if (4 mod 5) = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if 4 = 0\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  if false\n  then ((x)[@env2 ])\n  else (((try search p bt1 with | Not_found -> search p bt2))[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((try search p bt1 with | Not_found -> search p bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try try ((search p bt1)[@env2 ]) with | Not_found -> ((search p bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env4 ]) ((p)[@env2 ]) ((bt1)[@env3 ])\n  with | Not_found -> ((search p bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env6 ]) ((p)[@env4 ]) ((bt1)[@env5 ])\n  with | Not_found -> ((search)[@env3 ]) ((p)[@env1 ]) ((bt2)[@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env5": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env6": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env5 ]) (fun x -> (x mod 5) = 0) ((bt1)[@env4 ])\n  with | Not_found -> ((search)[@env3 ]) ((p)[@env1 ]) ((bt2)[@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env5": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env4 ]) (fun x -> (x mod 5) = 0) Empty\n  with | Not_found -> ((search)[@env3 ]) ((p)[@env1 ]) ((bt2)[@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env4": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env3 ]) (fun x -> (x mod 5) = 0) Empty\n  with\n  | Not_found -> ((search)[@env2 ]) (fun x -> (x mod 5) = 0) ((bt2)[@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try ((search)[@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((fun p ->\n        fun bt ->\n          match bt with\n          | Empty -> raise Not_found\n          | Node (x, bt1, bt2) ->\n              if p x\n              then x\n              else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ]) (fun x -> (x mod 5) = 0) Empty\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       ((fun bt ->\n           match bt with\n           | Empty -> raise Not_found\n           | Node (x, bt1, bt2) ->\n               if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n       [@env2 ])) (fun x -> (x mod 5) = 0) Empty\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       fun bt ->\n         ((match bt with\n           | Empty -> raise Not_found\n           | Node (x, bt1, bt2) ->\n               if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n         [@env2 ])) (fun x -> (x mod 5) = 0) Empty\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    (fun p ->\n       fun bt ->\n         match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             ((if p x\n               then x\n               else (try search p bt1 with | Not_found -> search p bt2))\n             [@env2 ])) (fun x -> (x mod 5) = 0) Empty\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    ((match bt with\n      | Empty -> raise Not_found\n      | Node (x, bt1, bt2) ->\n          ((if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n          [@env2 ]))\n    [@env3 ])\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    match ((bt)[@env4 ]) with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env3 ][@env2 ])\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try\n    match Empty with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env3 ][@env2 ])\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  try raise Not_found\n  with | Not_found -> ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Exn" ]
  },
  {
    "current_expression": {
      "expr":
        "try ((search)[@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((fun p ->\n      fun bt ->\n        match bt with\n        | Empty -> raise Not_found\n        | Node (x, bt1, bt2) ->\n            if p x\n            then x\n            else (try search p bt1 with | Not_found -> search p bt2))\n    [@env1 ]) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     ((fun bt ->\n         match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n     [@env1 ])) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     fun bt ->\n       ((match bt with\n         | Empty -> raise Not_found\n         | Node (x, bt1, bt2) ->\n             if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n       [@env1 ])) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  (fun p ->\n     fun bt ->\n       match bt with\n       | Empty -> raise Not_found\n       | Node (x, bt1, bt2) ->\n           ((if p x\n             then x\n             else (try search p bt1 with | Not_found -> search p bt2))\n           [@env1 ])) (fun x -> (x mod 5) = 0) Empty\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  ((match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        ((if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))\n        [@env1 ]))\n  [@env2 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  match ((bt)[@env3 ]) with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env3": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "try\n  match Empty with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env2 ][@env1 ])\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env2": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "try raise Not_found\nwith\n| Not_found ->\n    ((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n      (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Exn" ]
  },
  {
    "current_expression": {
      "expr":
        "((search)[@env0 ]) (fun x -> (x mod 5) = 0)\n  (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun p ->\n    fun bt ->\n      match bt with\n      | Empty -> raise Not_found\n      | Node (x, bt1, bt2) ->\n          if p x\n          then x\n          else (try search p bt1 with | Not_found -> search p bt2))[@env0 ])\n  (fun x -> (x mod 5) = 0) (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   ((fun bt ->\n       match bt with\n       | Empty -> raise Not_found\n       | Node (x, bt1, bt2) ->\n           if p x\n           then x\n           else (try search p bt1 with | Not_found -> search p bt2))\n   [@env0 ])) (fun x -> (x mod 5) = 0)\n  (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun bt ->\n     ((match bt with\n       | Empty -> raise Not_found\n       | Node (x, bt1, bt2) ->\n           if p x\n           then x\n           else (try search p bt1 with | Not_found -> search p bt2))\n     [@env0 ])) (fun x -> (x mod 5) = 0)\n  (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun bt ->\n     match bt with\n     | Empty -> raise Not_found\n     | Node (x, bt1, bt2) ->\n         ((if p x\n           then x\n           else (try search p bt1 with | Not_found -> search p bt2))\n         [@env0 ])) (fun x -> (x mod 5) = 0)\n  (Node (5, (Node (6, Empty, Empty)), Empty))",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> raise Not_found\n  | Node (x, bt1, bt2) ->\n      ((if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2))\n      [@env0 ]))\n[@env1 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env2 ]) with\n| Empty -> raise Not_found\n| Node (x, bt1, bt2) ->\n    ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n    [@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node (5, (Node (6, Empty, Empty)), Empty) with\n| Empty -> raise Not_found\n| Node (x, bt1, bt2) ->\n    ((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n    [@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else (try search p bt1 with | Not_found -> search p bt2))\n[@env0 ])",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 5\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ])\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (5 mod 5) = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if 0 = 0\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if true\nthen ((x)[@env1 ])\nelse (((try search p bt1 with | Not_found -> search p bt2))[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [ "search" ],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    match bt with\n    | Empty -> raise Not_found\n    | Node (x, bt1, bt2) ->\n        if p x\n        then x\n        else (try search p bt1 with | Not_found -> search p bt2)",
              "envs": {}
            }
          },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((x)[@env0 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "5", "envs": {} }, "step": [] }
]