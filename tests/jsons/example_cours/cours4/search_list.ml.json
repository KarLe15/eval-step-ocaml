[
  {
    "current_expression": {
      "expr": "((search (fun x -> (x mod 5) = 0) ex)[@env0 ])",
      "envs": {
        "env0": {
          "search": {
            "corec": [],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    let rec loop bts =\n      match bts with\n      | [] -> raise Not_found\n      | (Empty)::bts -> loop bts\n      | (Node (x, bt1, bt2))::bts ->\n          if p x then x else loop (bt1 :: bt2 :: bts) in\n    loop [bt]",
              "envs": {}
            }
          },
          "ex": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((search)[@env1 ]) (fun x -> (x mod 5) = 0) ((ex)[@env0 ])",
      "envs": {
        "env0": {
          "ex": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "search": {
            "corec": [],
            "expr": {
              "expr":
                "fun p ->\n  fun bt ->\n    let rec loop bts =\n      match bts with\n      | [] -> raise Not_found\n      | (Empty)::bts -> loop bts\n      | (Node (x, bt1, bt2))::bts ->\n          if p x then x else loop (bt1 :: bt2 :: bts) in\n    loop [bt]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun bt ->\n     let rec loop bts =\n       match bts with\n       | [] -> raise Not_found\n       | (Empty)::bts -> loop bts\n       | (Node (x, bt1, bt2))::bts ->\n           if p x then x else loop (bt1 :: bt2 :: bts) in\n     loop [bt]) (fun x -> (x mod 5) = 0) ((ex)[@env0 ])",
      "envs": {
        "env0": {
          "ex": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun p ->\n   fun bt ->\n     let rec loop bts =\n       match bts with\n       | [] -> raise Not_found\n       | (Empty)::bts -> loop bts\n       | (Node (x, bt1, bt2))::bts ->\n           if p x then x else loop (bt1 :: bt2 :: bts) in\n     loop [bt]) (fun x -> (x mod 5) = 0)\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((let rec loop bts =\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        if p x then x else loop (bt1 :: bt2 :: bts) in\n  loop [bt])\n[@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun bts ->\n      match bts with\n      | [] -> raise Not_found\n      | (Empty)::bts -> loop bts\n      | (Node (x, bt1, bt2))::bts ->\n          if p x then x else loop (bt1 :: bt2 :: bts))\n  [@env1 ]) in\n((loop [bt])[@env0 ])",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun bts ->\n      match bts with\n      | [] -> raise Not_found\n      | (Empty)::bts -> loop bts\n      | (Node (x, bt1, bt2))::bts ->\n          if p x then x else loop (bt1 :: bt2 :: bts))\n  [@env1 ]) in\nloop (([bt])[@env0 ])",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun bts ->\n      match bts with\n      | [] -> raise Not_found\n      | (Empty)::bts -> loop bts\n      | (Node (x, bt1, bt2))::bts ->\n          if p x then x else loop (bt1 :: bt2 :: bts))\n  [@env1 ]) in\nloop (([bt])[@env0 ])",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun bts ->\n      match bts with\n      | [] -> raise Not_found\n      | (Empty)::bts -> loop bts\n      | (Node (x, bt1, bt2))::bts ->\n          if p x then x else loop (bt1 :: bt2 :: bts))\n  [@env1 ]) in\nloop [((bt)[@env0 ])]",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop bts =\n  ((match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        if p x then x else loop (bt1 :: bt2 :: bts))\n  [@env1 ]) in\nloop [((bt)[@env0 ])]",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop bts =\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ]) in\nloop [((bt)[@env0 ])]",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop bts =\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]) in\nloop\n  [Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop\n    [Node\n       (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n         (Node (5, (Node (6, Empty, Empty)), Empty)))])\n[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  [Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ]))\n  [Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node\n   (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n     (Node (5, (Node (6, Empty, Empty)), Empty)))]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node\n   (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n     (Node (5, (Node (6, Empty, Empty)), Empty)))]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Node\n         (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n           (Node (5, (Node (6, Empty, Empty)), Empty)))]\nwith\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 1\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (1 mod 5) = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if 1 = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if false then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "1", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (((bt1)[@env0 ]) :: ((bt2)[@env1 ]) :: ((bts)[@env2 ]))",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ])\n  ((Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))) :: ((bt2)\n  [@env0 ]) :: ((bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ])\n  ((Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))) ::\n  (Node (5, (Node (6, Empty, Empty)), Empty)) :: ((bts)[@env0 ]))",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  [Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)));\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)));\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ]))\n  [Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)));\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)));\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)));\nNode (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)));\nNode (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)));\n      Node (5, (Node (6, Empty, Empty)), Empty)]\nwith\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 2\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (2 mod 5) = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if 2 = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if false then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "2", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (((bt1)[@env0 ]) :: ((bt2)[@env1 ]) :: ((bts)[@env2 ]))",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) ((Node (3, Empty, Empty)) :: ((bt2)[@env0 ]) :: ((bts)\n  [@env1 ]))",
      "envs": {
        "env0": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) ((Node (3, Empty, Empty)) :: (Node (4, Empty, Empty)) ::\n  ((bts)[@env0 ]))",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  [Node (3, Empty, Empty);\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Node (3, Empty, Empty);\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ]))\n  [Node (3, Empty, Empty);\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Node (3, Empty, Empty);\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (3, Empty, Empty);\nNode (4, Empty, Empty);\nNode (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (3, Empty, Empty);\nNode (4, Empty, Empty);\nNode (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Node (3, Empty, Empty);\n      Node (4, Empty, Empty);\n      Node (5, (Node (6, Empty, Empty)), Empty)]\nwith\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 3\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (3 mod 5) = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if 3 = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if false then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "3", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (((bt1)[@env0 ]) :: ((bt2)[@env1 ]) :: ((bts)[@env2 ]))",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) (Empty :: ((bt2)[@env0 ]) :: ((bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) (Empty :: Empty :: ((bts)[@env0 ]))",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  [Empty;\n  Empty;\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Empty;\n  Empty;\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ]))\n  [Empty;\n  Empty;\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Empty;\n  Empty;\n  Node (4, Empty, Empty);\n  Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty;\nEmpty;\nNode (4, Empty, Empty);\nNode (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty;\nEmpty;\nNode (4, Empty, Empty);\nNode (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty;\n      Empty;\n      Node (4, Empty, Empty);\n      Node (5, (Node (6, Empty, Empty)), Empty)]\nwith\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ]))\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty;\n      Node (4, Empty, Empty);\n      Node (5, (Node (6, Empty, Empty)), Empty)]\nwith\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ]))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\nwith\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 4\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (4 mod 5) = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if 4 = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if false then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "4", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bt1 :: bt2 :: bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) (((bt1)[@env0 ]) :: ((bt2 :: bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (((bt1)[@env0 ]) :: ((bt2)[@env1 ]) :: ((bts)[@env2 ]))",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) (Empty :: ((bt2)[@env0 ]) :: ((bts)[@env1 ]))",
      "envs": {
        "env0": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) (Empty :: Empty :: ((bts)[@env0 ]))",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) [Empty; Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Empty; Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ])) [Empty; Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Empty; Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty; Empty; Node (5, (Node (6, Empty, Empty)), Empty)] with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) [Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ])) [Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bts)[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) ((bts)[@env0 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) [Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bts ->\n    match bts with\n    | [] -> raise Not_found\n    | (Empty)::bts -> loop bts\n    | (Node (x, bt1, bt2))::bts ->\n        ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))[@env1 ])\n  [Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   ((match bts with\n     | [] -> raise Not_found\n     | (Empty)::bts -> loop bts\n     | (Node (x, bt1, bt2))::bts ->\n         ((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ]))\n   [@env1 ])) [Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bts ->\n   match bts with\n   | [] -> raise Not_found\n   | (Empty)::bts -> ((loop bts)[@env0 ])\n   | (Node (x, bt1, bt2))::bts ->\n       ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n  [Node (5, (Node (6, Empty, Empty)), Empty)]",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> ((loop bts)[@env0 ])\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ]))\n[@env3 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env3 ]) with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env5 ])",
              "envs": {
                "env5": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env3": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Node (5, (Node (6, Empty, Empty)), Empty)] with\n| [] -> raise Not_found\n| (Empty)::bts -> ((loop bts)[@env0 ])\n| (Node (x, bt1, bt2))::bts -> ((if p x then x else loop (bt1 :: bt2 :: bts))\n    [@env2 ][@env1 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          }
        },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        },
        "env1": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((if p x then x else loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env1 ])",
              "envs": {
                "env1": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "x": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((p)[@env3 ]) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env4 ])",
              "envs": {
                "env4": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "p": {
            "corec": [],
            "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) ((x)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (fun x -> (x mod 5) = 0) 5\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x mod 5) = 0)[@env2 ])\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if ((x mod 5)[@env2 ]) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "if (((x)[@env2 ]) mod 5) = 0\nthen ((x)[@env1 ])\nelse ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env3 ])",
              "envs": {
                "env3": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "if (5 mod 5) = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if 0 = 0 then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "if true then ((x)[@env1 ]) else ((loop (bt1 :: bt2 :: bts))[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bts ->\n  match bts with\n  | [] -> raise Not_found\n  | (Empty)::bts -> loop bts\n  | (Node (x, bt1, bt2))::bts ->\n      ((if p x then x else loop (bt1 :: bt2 :: bts))[@env2 ])",
              "envs": {
                "env2": {
                  "p": {
                    "corec": [],
                    "expr": { "expr": "fun x -> (x mod 5) = 0", "envs": {} }
                  }
                }
              }
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "If" ]
  },
  {
    "current_expression": {
      "expr": "((x)[@env0 ])",
      "envs": {
        "env0": { "x": { "corec": [], "expr": { "expr": "5", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "5", "envs": {} }, "step": [] }
]