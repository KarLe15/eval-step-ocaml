[
  {
    "current_expression": {
      "expr": "((size ex)[@env0 ])",
      "envs": {
        "env0": {
          "size": {
            "corec": [ "size" ],
            "expr": {
              "expr":
                "fun bt ->\n  let rec loop bt bts r =\n    match bt with\n    | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n    | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1) in\n  loop bt [] 0",
              "envs": {}
            }
          },
          "ex": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((size)[@env1 ]) ((ex)[@env0 ])",
      "envs": {
        "env0": {
          "ex": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "size": {
            "corec": [ "size" ],
            "expr": {
              "expr":
                "fun bt ->\n  let rec loop bt bts r =\n    match bt with\n    | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n    | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1) in\n  loop bt [] 0",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((size)[@env0 ])\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {
        "env0": {
          "size": {
            "corec": [ "size" ],
            "expr": {
              "expr":
                "fun bt ->\n  let rec loop bt bts r =\n    match bt with\n    | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n    | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1) in\n  loop bt [] 0",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   let rec loop bt bts r =\n     match bt with\n     | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n     | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1) in\n   loop bt [] 0)\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty))))",
      "envs": {}
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((let rec loop bt bts r =\n    match bt with\n    | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n    | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1) in\n  loop bt [] 0)\n[@env0 ])",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun bt ->\n      fun bts ->\n        fun r ->\n          match bt with\n          | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n          | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n  [@env1 ]) in\n((loop bt [] 0)[@env0 ])",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop =\n  ((fun bt ->\n      fun bts ->\n        fun r ->\n          match bt with\n          | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n          | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n  [@env1 ]) in\nloop ((bt)[@env0 ]) [] 0",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop bt bts r =\n  match bt with\n  | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n  | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1) in\nloop ((bt)[@env0 ]) [] 0",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "let rec loop bt bts r =\n  match bt with\n  | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n  | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1) in\nloop\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0",
      "envs": {}
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop\n    (Node\n       (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n         (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0)\n[@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ])\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ]))\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ]))\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ]))\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  (Node\n     (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n       (Node (5, (Node (6, Empty, Empty)), Empty)))) [] 0",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node\n        (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n          (Node (5, (Node (6, Empty, Empty)), Empty)))\nwith\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node\n  (1, (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))),\n    (Node (5, (Node (6, Empty, Empty)), Empty)))",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "0", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          },
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  ((r + 1)[@env3 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  (((r)[@env3 ]) + 1)",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ])\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))) (((bt2)\n  [@env0 ]) :: ((bts)[@env1 ])) (((r)[@env2 ]) + 1)",
      "envs": {
        "env0": {
          "bt2": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ])\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  ((Node (5, (Node (6, Empty, Empty)), Empty)) :: ((bts)[@env0 ]))\n  (((r)[@env1 ]) + 1)",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ])\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] (((r)[@env0 ]) + 1)",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "0", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] (0 + 1)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ])\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 1",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ])\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 1",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 1",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ]))\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 1",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ]))\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 1",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  (Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 1",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty))) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": {
              "expr":
                "Node (2, (Node (3, Empty, Empty)), (Node (4, Empty, Empty)))",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "1", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  ((r + 1)[@env3 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  (((r)[@env3 ]) + 1)",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (Node (3, Empty, Empty)) (((bt2)[@env0 ]) :: ((bts)\n  [@env1 ])) (((r)[@env2 ]) + 1)",
      "envs": {
        "env0": {
          "bt2": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) (Node (3, Empty, Empty)) ((Node (4, Empty, Empty)) :: ((bts)\n  [@env0 ])) (((r)[@env1 ]) + 1)",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  (((r)[@env0 ]) + 1)",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "1", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] (\n  1 + 1)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 2",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ])\n  (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 2",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 2",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 2",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 2",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  (Node (3, Empty, Empty))\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 2",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node (3, Empty, Empty) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (3, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "2", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  ((r + 1)[@env3 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  (((r)[@env3 ]) + 1)",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) Empty (((bt2)[@env0 ]) :: ((bts)[@env1 ]))\n  (((r)[@env2 ]) + 1)",
      "envs": {
        "env0": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) Empty (Empty :: ((bts)[@env0 ])) (((r)[@env1 ]) + 1)",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  (((r)[@env0 ]) + 1)",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "2", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  (2 + 1)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ]) Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  Empty\n  [Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\n  3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Empty with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env2 ]) with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Empty; Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty;\n      Node (4, Empty, Empty);\n      Node (5, (Node (6, Empty, Empty)), Empty)]\nwith\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env3 ]) ((bt)[@env0 ]) ((bts)[@env1 ]) ((r)[@env2 ])",
      "envs": {
        "env0": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) Empty ((bts)[@env0 ]) ((r)[@env1 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) Empty\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] ((r)\n  [@env0 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) Empty\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ]) Empty\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) Empty\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) Empty\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) Empty\n  [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  Empty [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Empty with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env2 ]) with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr":
                "[Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Node (4, Empty, Empty); Node (5, (Node (6, Empty, Empty)), Empty)]\nwith\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env3 ]) ((bt)[@env0 ]) ((bts)[@env1 ]) ((r)[@env2 ])",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) (Node (4, Empty, Empty)) ((bts)[@env0 ]) ((r)[@env1 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) (Node (4, Empty, Empty))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] ((r)[@env0 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) (Node (4, Empty, Empty))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ])\n  (Node (4, Empty, Empty)) [Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) (Node (4, Empty, Empty))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) (Node (4, Empty, Empty))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) (Node (4, Empty, Empty))\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  (Node (4, Empty, Empty)) [Node (5, (Node (6, Empty, Empty)), Empty)] 3",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node (4, Empty, Empty) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (4, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "3", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  ((r + 1)[@env3 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  (((r)[@env3 ]) + 1)",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) Empty (((bt2)[@env0 ]) :: ((bts)[@env1 ]))\n  (((r)[@env2 ]) + 1)",
      "envs": {
        "env0": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) Empty (Empty :: ((bts)[@env0 ])) (((r)[@env1 ]) + 1)",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) Empty [Empty; Node (5, (Node (6, Empty, Empty)), Empty)]\n  (((r)[@env0 ]) + 1)",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "3", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) Empty [Empty; Node (5, (Node (6, Empty, Empty)), Empty)]\n  (3 + 1)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) Empty [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ]) Empty\n  [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) Empty [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) Empty [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) Empty [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  Empty [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Empty with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env2 ]) with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Empty; Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty; Node (5, (Node (6, Empty, Empty)), Empty)] with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env3 ]) ((bt)[@env0 ]) ((bts)[@env1 ]) ((r)[@env2 ])",
      "envs": {
        "env0": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) Empty ((bts)[@env0 ]) ((r)[@env1 ])",
      "envs": {
        "env0": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) Empty [Node (5, (Node (6, Empty, Empty)), Empty)] ((r)\n  [@env0 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) Empty [Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ]) Empty\n  [Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) Empty [Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) Empty [Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) Empty [Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  Empty [Node (5, (Node (6, Empty, Empty)), Empty)] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Empty with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env2 ]) with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": {
              "expr": "[Node (5, (Node (6, Empty, Empty)), Empty)]",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Node (5, (Node (6, Empty, Empty)), Empty)] with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env3 ]) ((bt)[@env0 ]) ((bts)[@env1 ]) ((r)[@env2 ])",
      "envs": {
        "env0": {
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) (Node (5, (Node (6, Empty, Empty)), Empty)) ((bts)[@env0 ])\n  ((r)[@env1 ])",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) (Node (5, (Node (6, Empty, Empty)), Empty)) [] ((r)[@env0 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env0 ]) (Node (5, (Node (6, Empty, Empty)), Empty)) [] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ])\n  (Node (5, (Node (6, Empty, Empty)), Empty)) [] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) (Node (5, (Node (6, Empty, Empty)), Empty)) [] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) (Node (5, (Node (6, Empty, Empty)), Empty)) [] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) (Node (5, (Node (6, Empty, Empty)), Empty)) [] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  (Node (5, (Node (6, Empty, Empty)), Empty)) [] 4",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node (5, (Node (6, Empty, Empty)), Empty) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": {
              "expr": "Node (5, (Node (6, Empty, Empty)), Empty)",
              "envs": {}
            }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "4", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  ((r + 1)[@env3 ])",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  (((r)[@env3 ]) + 1)",
      "envs": {
        "env0": {
          "bt1": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) (Node (6, Empty, Empty)) (((bt2)[@env0 ]) :: ((bts)\n  [@env1 ])) (((r)[@env2 ]) + 1)",
      "envs": {
        "env0": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) (Node (6, Empty, Empty)) (Empty :: ((bts)[@env0 ]))\n  (((r)[@env1 ]) + 1)",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env1 ]) (Node (6, Empty, Empty)) [Empty] (((r)[@env0 ]) + 1)",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "4", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) (Node (6, Empty, Empty)) [Empty] (4 + 1)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) (Node (6, Empty, Empty)) [Empty] 5",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ])\n  (Node (6, Empty, Empty)) [Empty] 5",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) (Node (6, Empty, Empty)) [Empty] 5",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) (Node (6, Empty, Empty)) [Empty] 5",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) (Node (6, Empty, Empty)) [Empty] 5",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  (Node (6, Empty, Empty)) [Empty] 5",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env4": {
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Node (6, Empty, Empty) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": {
            "corec": [],
            "expr": { "expr": "Node (6, Empty, Empty)", "envs": {} }
          }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env2 ][@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env2": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt1 (bt2 :: bts) (r + 1))[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "5", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } },
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) ((bt1)[@env0 ]) ((bt2 :: bts)[@env1 ]) ((r + 1)[@env2 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  ((r + 1)[@env3 ])",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env4 ]) ((bt1)[@env0 ]) (((bt2)[@env1 ]) :: ((bts)[@env2 ]))\n  (((r)[@env3 ]) + 1)",
      "envs": {
        "env0": {
          "bt1": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env3": { "r": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env4": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env3 ]) Empty (((bt2)[@env0 ]) :: ((bts)[@env1 ]))\n  (((r)[@env2 ]) + 1)",
      "envs": {
        "env0": {
          "bt2": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "((loop)[@env2 ]) Empty (Empty :: ((bts)[@env0 ])) (((r)[@env1 ]) + 1)",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) Empty [Empty; Empty] (((r)[@env0 ]) + 1)",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "5", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) Empty [Empty; Empty] (5 + 1)",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) Empty [Empty; Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ]) Empty\n  [Empty; Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) Empty [Empty; Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) Empty [Empty; Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) Empty [Empty; Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  Empty [Empty; Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Empty with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env2 ]) with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": {
            "corec": [],
            "expr": { "expr": "[Empty; Empty]", "envs": {} }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty; Empty] with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env3 ]) ((bt)[@env0 ]) ((bts)[@env1 ]) ((r)[@env2 ])",
      "envs": {
        "env0": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) Empty ((bts)[@env0 ]) ((r)[@env1 ])",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) Empty [Empty] ((r)[@env0 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) Empty [Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ]) Empty\n  [Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) Empty [Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) Empty [Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) Empty [Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  Empty [Empty] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Empty with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env2 ]) with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[Empty]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [Empty] with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env3 ]) ((bt)[@env0 ]) ((bts)[@env1 ]) ((r)[@env2 ])",
      "envs": {
        "env0": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env1": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env2": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env3": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env2 ]) Empty ((bts)[@env0 ]) ((r)[@env1 ])",
      "envs": {
        "env0": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env1": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env1 ]) Empty [] ((r)[@env0 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((loop)[@env0 ]) Empty [] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
        "((fun bt ->\n    fun bts ->\n      fun r ->\n        match bt with\n        | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n        | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))[@env0 ]) Empty\n  [] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   ((fun bts ->\n       fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n   [@env0 ])) Empty [] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     ((fun r ->\n         match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n     [@env0 ])) Empty [] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       ((match bt with\n         | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n         | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1))\n       [@env0 ])) Empty [] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "(fun bt ->\n   fun bts ->\n     fun r ->\n       match bt with\n       | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n           [@env0 ])\n       | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n  Empty [] 6",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bt with\n  | Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n      [@env0 ])\n  | Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env1 ]))\n[@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bt)[@env4 ]) with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        },
        "env4": {
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match Empty with\n| Empty -> (((match bts with | [] -> r | bt::bts -> loop bt bts r))\n    [@env1 ][@env0 ])\n| Node (_, bt1, bt2) -> ((loop bt1 (bt2 :: bts) (r + 1))[@env3 ][@env2 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        },
        "env2": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env3": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env1 ][@env0 ])",
      "envs": {
        "env0": {
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr":
        "((match bts with | [] -> r | bt::bts -> loop bt bts r)[@env0 ])",
      "envs": {
        "env0": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          },
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } },
          "bt": { "corec": [], "expr": { "expr": "Empty", "envs": {} } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
        "match ((bts)[@env2 ]) with\n| [] -> ((r)[@env0 ])\n| bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        },
        "env2": {
          "bts": { "corec": [], "expr": { "expr": "[]", "envs": {} } }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
        "match [] with | [] -> ((r)[@env0 ]) | bt::bts -> ((loop bt bts r)[@env1 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } },
        "env1": {
          "r": { "corec": [], "expr": { "expr": "6", "envs": {} } },
          "loop": {
            "corec": [ "loop" ],
            "expr": {
              "expr":
                "fun bt ->\n  fun bts ->\n    fun r ->\n      match bt with\n      | Empty -> (match bts with | [] -> r | bt::bts -> loop bt bts r)\n      | Node (_, bt1, bt2) -> loop bt1 (bt2 :: bts) (r + 1)",
              "envs": {}
            }
          }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((r)[@env0 ])",
      "envs": {
        "env0": { "r": { "corec": [], "expr": { "expr": "6", "envs": {} } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "6", "envs": {} }, "step": [] }
]