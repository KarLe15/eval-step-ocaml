[
  {
    "current_expression": {
      "expr":
      "((let rec fold_left f a l =\n    match l with | p::q -> fold_left f (f a p) q | [] -> a in\n  fold_left (+) 0 [1; 2; 3; 4])\n[@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "let rec fold_left =\n  ((fun f ->\n      fun a ->\n        fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n  [@env0 ]) in\nfold_left (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "let rec fold_left f =\n  ((fun a -> fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)\n  [@env0 ]) in\nfold_left (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "let rec fold_left f a =\n  ((fun l -> match l with | p::q -> fold_left f (f a p) q | [] -> a)[@env0 ]) in\nfold_left (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "let rec fold_left f a l =\n  ((match l with | p::q -> fold_left f (f a p) q | [] -> a)[@env0 ]) in\nfold_left (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "let rec fold_left f a l =\n  match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a in\nfold_left (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "Let" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left (+) 0 [1; 2; 3; 4])[@env0 ])",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
      "((fun f ->\n    fun a ->\n      fun l ->\n        match l with | p::q -> ((fold_left f (f a p) q)[@env1 ]) | [] -> a)\n  [@env0 ]) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   ((fun a ->\n       fun l ->\n         match l with | p::q -> ((fold_left f (f a p) q)[@env1 ]) | [] -> a)\n   [@env0 ])) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun a ->\n     ((fun l ->\n         match l with | p::q -> ((fold_left f (f a p) q)[@env1 ]) | [] -> a)\n     [@env0 ])) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun a ->\n     fun l ->\n       ((match l with | p::q -> ((fold_left f (f a p) q)[@env1 ]) | [] -> a)\n       [@env0 ])) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun a ->\n     fun l ->\n       match l with\n       | p::q -> ((fold_left f (f a p) q)[@env0 ][@env1 ])\n       | [] -> a) (+) 0 [1; 2; 3; 4]",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
      "((match l with | p::q -> ((fold_left f (f a p) q)[@env1 ][@env2 ]) | [] -> a)\n[@env0 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[1; 2; 3; 4]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "match ((l)[@env0 ]) with\n| p::q -> ((fold_left f (f a p) q)[@env1 ][@env2 ][@env3 ])\n| [] -> ((a)[@env4 ])",
      "envs": {
        "env4": { "a": { "corec": [], "expr": { "expr": "0" } } },
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        },
        "env0": { "l": { "corec": [], "expr": { "expr": "[1; 2; 3; 4]" } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "match [1; 2; 3; 4] with\n| p::q -> ((fold_left f (f a p) q)[@env0 ][@env1 ][@env2 ])\n| [] -> ((a)[@env3 ])",
      "envs": {
        "env3": { "a": { "corec": [], "expr": { "expr": "0" } } },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        },
        "env0": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ][@env1 ][@env2 ][@env3 ])",
      "envs": {
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        },
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } },
          "p": { "corec": [], "expr": { "expr": "1" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ][@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          }
        },
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } },
          "p": { "corec": [], "expr": { "expr": "1" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ][@env1 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } },
          "p": { "corec": [], "expr": { "expr": "1" } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun a ->\n    fun l ->\n      match l with | p::q -> ((fold_left f (f a p) q)[@env0 ]) | [] -> a",
              "envs": {
                "env0": {
                  "fold_left": {
                    "corec": [ "fold_left" ],
                    "expr": {
                      "expr":
                      "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
                    }
                  }
                }
              }
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f a p) q)[@env0 ])",
      "envs": {
        "env0": {
          "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } },
          "p": { "corec": [], "expr": { "expr": "1" } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ]) ((f a p)[@env2 ]) ((q)[@env3 ])",
      "envs": {
        "env3": { "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } } },
        "env2": {
          "p": { "corec": [], "expr": { "expr": "1" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "a": { "corec": [], "expr": { "expr": "0" } }
        },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ])\n  (((f)[@env2 ]) ((a)[@env3 ]) ((p)[@env4 ])) ((q)[@env5 ])",
      "envs": {
        "env5": { "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } } },
        "env4": { "p": { "corec": [], "expr": { "expr": "1" } } },
        "env3": { "a": { "corec": [], "expr": { "expr": "0" } } },
        "env2": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((f)[@env1 ]) ((a)[@env2 ]) ((p)[@env3 ])) ((q)\n  [@env4 ])",
      "envs": {
        "env4": { "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } } },
        "env3": { "p": { "corec": [], "expr": { "expr": "1" } } },
        "env2": { "a": { "corec": [], "expr": { "expr": "0" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((a)[@env1 ]) + ((p)[@env2 ])) ((q)[@env3 ])",
      "envs": {
        "env3": { "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } } },
        "env2": { "p": { "corec": [], "expr": { "expr": "1" } } },
        "env1": { "a": { "corec": [], "expr": { "expr": "0" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (0 + ((p)[@env1 ])) ((q)[@env2 ])",
      "envs": {
        "env2": { "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } } },
        "env1": { "p": { "corec": [], "expr": { "expr": "1" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (0 + 1) ((q)[@env1 ])",
      "envs": {
        "env1": { "q": { "corec": [], "expr": { "expr": "[2; 3; 4]" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (0 + 1) [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
      "((fun f ->\n    fun accu ->\n      fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n  [@env0 ]) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   ((fun accu ->\n       fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n   [@env0 ])) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     ((fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n     [@env0 ])) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l -> ((match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n       [@env0 ])) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((fold_left f (f accu a) l)[@env0 ])) (+) 1 [2; 3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
      "((match l with | [] -> accu | a::l -> ((fold_left f (f accu a) l)[@env1 ]))\n[@env0 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[2; 3; 4]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "1" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "match ((l)[@env0 ]) with\n| [] -> ((accu)[@env1 ])\n| a::l -> ((fold_left f (f accu a) l)[@env2 ][@env3 ])",
      "envs": {
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "1" } }
        },
        "env1": { "accu": { "corec": [], "expr": { "expr": "1" } } },
        "env0": { "l": { "corec": [], "expr": { "expr": "[2; 3; 4]" } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "match [2; 3; 4] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((fold_left f (f accu a) l)[@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "1" } }
        },
        "env0": { "accu": { "corec": [], "expr": { "expr": "1" } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ][@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "1" } }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]" } },
          "a": { "corec": [], "expr": { "expr": "2" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ][@env1 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "1" } },
          "a": { "corec": [], "expr": { "expr": "2" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]" } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "1" } },
          "a": { "corec": [], "expr": { "expr": "2" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ]) ((f accu a)[@env2 ]) ((l)[@env3 ])",
      "envs": {
        "env3": { "l": { "corec": [], "expr": { "expr": "[3; 4]" } } },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "1" } },
          "a": { "corec": [], "expr": { "expr": "2" } }
        },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ])\n  (((f)[@env2 ]) ((accu)[@env3 ]) ((a)[@env4 ])) ((l)[@env5 ])",
      "envs": {
        "env5": { "l": { "corec": [], "expr": { "expr": "[3; 4]" } } },
        "env4": { "a": { "corec": [], "expr": { "expr": "2" } } },
        "env3": { "accu": { "corec": [], "expr": { "expr": "1" } } },
        "env2": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((f)[@env1 ]) ((accu)[@env2 ]) ((a)[@env3 ])) ((l)\n  [@env4 ])",
      "envs": {
        "env4": { "l": { "corec": [], "expr": { "expr": "[3; 4]" } } },
        "env3": { "a": { "corec": [], "expr": { "expr": "2" } } },
        "env2": { "accu": { "corec": [], "expr": { "expr": "1" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((accu)[@env1 ]) + ((a)[@env2 ])) ((l)[@env3 ])",
      "envs": {
        "env3": { "l": { "corec": [], "expr": { "expr": "[3; 4]" } } },
        "env2": { "a": { "corec": [], "expr": { "expr": "2" } } },
        "env1": { "accu": { "corec": [], "expr": { "expr": "1" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (1 + ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env2": { "l": { "corec": [], "expr": { "expr": "[3; 4]" } } },
        "env1": { "a": { "corec": [], "expr": { "expr": "2" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (1 + 2) ((l)[@env1 ])",
      "envs": {
        "env1": { "l": { "corec": [], "expr": { "expr": "[3; 4]" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (1 + 2) [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
      "((fun f ->\n    fun accu ->\n      fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n  [@env0 ]) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   ((fun accu ->\n       fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n   [@env0 ])) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     ((fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n     [@env0 ])) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l -> ((match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n       [@env0 ])) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((fold_left f (f accu a) l)[@env0 ])) (+) 3 [3; 4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
      "((match l with | [] -> accu | a::l -> ((fold_left f (f accu a) l)[@env1 ]))\n[@env0 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[3; 4]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "3" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "match ((l)[@env0 ]) with\n| [] -> ((accu)[@env1 ])\n| a::l -> ((fold_left f (f accu a) l)[@env2 ][@env3 ])",
      "envs": {
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "3" } }
        },
        "env1": { "accu": { "corec": [], "expr": { "expr": "3" } } },
        "env0": { "l": { "corec": [], "expr": { "expr": "[3; 4]" } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "match [3; 4] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((fold_left f (f accu a) l)[@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "3" } }
        },
        "env0": { "accu": { "corec": [], "expr": { "expr": "3" } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ][@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "3" } }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[4]" } },
          "a": { "corec": [], "expr": { "expr": "3" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ][@env1 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[4]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "3" } },
          "a": { "corec": [], "expr": { "expr": "3" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[4]" } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "3" } },
          "a": { "corec": [], "expr": { "expr": "3" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ]) ((f accu a)[@env2 ]) ((l)[@env3 ])",
      "envs": {
        "env3": { "l": { "corec": [], "expr": { "expr": "[4]" } } },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "3" } },
          "a": { "corec": [], "expr": { "expr": "3" } }
        },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ])\n  (((f)[@env2 ]) ((accu)[@env3 ]) ((a)[@env4 ])) ((l)[@env5 ])",
      "envs": {
        "env5": { "l": { "corec": [], "expr": { "expr": "[4]" } } },
        "env4": { "a": { "corec": [], "expr": { "expr": "3" } } },
        "env3": { "accu": { "corec": [], "expr": { "expr": "3" } } },
        "env2": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((f)[@env1 ]) ((accu)[@env2 ]) ((a)[@env3 ])) ((l)\n  [@env4 ])",
      "envs": {
        "env4": { "l": { "corec": [], "expr": { "expr": "[4]" } } },
        "env3": { "a": { "corec": [], "expr": { "expr": "3" } } },
        "env2": { "accu": { "corec": [], "expr": { "expr": "3" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((accu)[@env1 ]) + ((a)[@env2 ])) ((l)[@env3 ])",
      "envs": {
        "env3": { "l": { "corec": [], "expr": { "expr": "[4]" } } },
        "env2": { "a": { "corec": [], "expr": { "expr": "3" } } },
        "env1": { "accu": { "corec": [], "expr": { "expr": "3" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (3 + ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env2": { "l": { "corec": [], "expr": { "expr": "[4]" } } },
        "env1": { "a": { "corec": [], "expr": { "expr": "3" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (3 + 3) ((l)[@env1 ])",
      "envs": {
        "env1": { "l": { "corec": [], "expr": { "expr": "[4]" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (3 + 3) [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
      "((fun f ->\n    fun accu ->\n      fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n  [@env0 ]) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   ((fun accu ->\n       fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n   [@env0 ])) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     ((fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n     [@env0 ])) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l -> ((match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n       [@env0 ])) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((fold_left f (f accu a) l)[@env0 ])) (+) 6 [4]",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
      "((match l with | [] -> accu | a::l -> ((fold_left f (f accu a) l)[@env1 ]))\n[@env0 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[4]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "6" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "match ((l)[@env0 ]) with\n| [] -> ((accu)[@env1 ])\n| a::l -> ((fold_left f (f accu a) l)[@env2 ][@env3 ])",
      "envs": {
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "6" } }
        },
        "env1": { "accu": { "corec": [], "expr": { "expr": "6" } } },
        "env0": { "l": { "corec": [], "expr": { "expr": "[4]" } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "match [4] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((fold_left f (f accu a) l)[@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "6" } }
        },
        "env0": { "accu": { "corec": [], "expr": { "expr": "6" } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ][@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "6" } }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]" } },
          "a": { "corec": [], "expr": { "expr": "4" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ][@env1 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "6" } },
          "a": { "corec": [], "expr": { "expr": "4" } }
        }
      }
    },
    "step": [ "SubstCombine" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left f (f accu a) l)[@env0 ])",
      "envs": {
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]" } },
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "6" } },
          "a": { "corec": [], "expr": { "expr": "4" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ]) ((f accu a)[@env2 ]) ((l)[@env3 ])",
      "envs": {
        "env3": { "l": { "corec": [], "expr": { "expr": "[]" } } },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "6" } },
          "a": { "corec": [], "expr": { "expr": "4" } }
        },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) ((f)[@env1 ])\n  (((f)[@env2 ]) ((accu)[@env3 ]) ((a)[@env4 ])) ((l)[@env5 ])",
      "envs": {
        "env5": { "l": { "corec": [], "expr": { "expr": "[]" } } },
        "env4": { "a": { "corec": [], "expr": { "expr": "4" } } },
        "env3": { "accu": { "corec": [], "expr": { "expr": "6" } } },
        "env2": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((f)[@env1 ]) ((accu)[@env2 ]) ((a)[@env3 ])) ((l)\n  [@env4 ])",
      "envs": {
        "env4": { "l": { "corec": [], "expr": { "expr": "[]" } } },
        "env3": { "a": { "corec": [], "expr": { "expr": "4" } } },
        "env2": { "accu": { "corec": [], "expr": { "expr": "6" } } },
        "env1": { "f": { "corec": [], "expr": { "expr": "(+)" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "((fold_left)[@env0 ]) (+) (((accu)[@env1 ]) + ((a)[@env2 ])) ((l)[@env3 ])",
      "envs": {
        "env3": { "l": { "corec": [], "expr": { "expr": "[]" } } },
        "env2": { "a": { "corec": [], "expr": { "expr": "4" } } },
        "env1": { "accu": { "corec": [], "expr": { "expr": "6" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (6 + ((a)[@env1 ])) ((l)[@env2 ])",
      "envs": {
        "env2": { "l": { "corec": [], "expr": { "expr": "[]" } } },
        "env1": { "a": { "corec": [], "expr": { "expr": "4" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (6 + 4) ((l)[@env1 ])",
      "envs": {
        "env1": { "l": { "corec": [], "expr": { "expr": "[]" } } },
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) (6 + 4) []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunRuntime" ]
  },
  {
    "current_expression": {
      "expr": "((fold_left)[@env0 ]) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "SubstFun" ]
  },
  {
    "current_expression": {
      "expr":
      "((fun f ->\n    fun accu ->\n      fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n  [@env0 ]) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   ((fun accu ->\n       fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n   [@env0 ])) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     ((fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n     [@env0 ])) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l -> ((match l with | [] -> accu | a::l -> fold_left f (f accu a) l)\n       [@env0 ])) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "(fun f ->\n   fun accu ->\n     fun l ->\n       match l with\n       | [] -> accu\n       | a::l -> ((fold_left f (f accu a) l)[@env0 ])) (+) 10 []",
      "envs": {
        "env0": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        }
      }
    },
    "step": [ "ApplyFunComplete" ]
  },
  {
    "current_expression": {
      "expr":
      "((match l with | [] -> accu | a::l -> ((fold_left f (f accu a) l)[@env1 ]))\n[@env0 ])",
      "envs": {
        "env1": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env0": {
          "l": { "corec": [], "expr": { "expr": "[]" } },
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "10" } }
        }
      }
    },
    "step": [ "MoveDownSubst" ]
  },
  {
    "current_expression": {
      "expr":
      "match ((l)[@env0 ]) with\n| [] -> ((accu)[@env1 ])\n| a::l -> ((fold_left f (f accu a) l)[@env2 ][@env3 ])",
      "envs": {
        "env3": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env2": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "10" } }
        },
        "env1": { "accu": { "corec": [], "expr": { "expr": "10" } } },
        "env0": { "l": { "corec": [], "expr": { "expr": "[]" } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  {
    "current_expression": {
      "expr":
      "match [] with\n| [] -> ((accu)[@env0 ])\n| a::l -> ((fold_left f (f accu a) l)[@env1 ][@env2 ])",
      "envs": {
        "env2": {
          "fold_left": {
            "corec": [ "fold_left" ],
            "expr": {
              "expr":
              "fun f ->\n  fun accu ->\n    fun l -> match l with | [] -> accu | a::l -> fold_left f (f accu a) l"
            }
          }
        },
        "env1": {
          "f": { "corec": [], "expr": { "expr": "(+)" } },
          "accu": { "corec": [], "expr": { "expr": "10" } }
        },
        "env0": { "accu": { "corec": [], "expr": { "expr": "10" } } }
      }
    },
    "step": [ "Match" ]
  },
  {
    "current_expression": {
      "expr": "((accu)[@env0 ])",
      "envs": {
        "env0": { "accu": { "corec": [], "expr": { "expr": "10" } } }
      }
    },
    "step": [ "SubstVar" ]
  },
  { "current_expression": { "expr": "10" }, "step": [] }
]
